/*!
 * Font Awesome Free 5.15.3 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 */
(function () {
  'use strict';

  var _WINDOW = {};
  var _DOCUMENT = {};

  try {
    if (typeof window !== 'undefined') _WINDOW = window;
    if (typeof document !== 'undefined') _DOCUMENT = document;
  } catch (e) {}

  var _ref = _WINDOW.navigator || {},
      _ref$userAgent = _ref.userAgent,
      userAgent = _ref$userAgent === void 0 ? '' : _ref$userAgent;

  var WINDOW = _WINDOW;
  var DOCUMENT = _DOCUMENT;
  var IS_BROWSER = !!WINDOW.document;
  var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === 'function' && typeof DOCUMENT.createElement === 'function';
  var IS_IE = ~userAgent.indexOf('MSIE') || ~userAgent.indexOf('Trident/');

  var NAMESPACE_IDENTIFIER = '___FONT_AWESOME___';
  var PRODUCTION = function () {
    try {
      return "production" === 'production';
    } catch (e) {
      return false;
    }
  }();

  function bunker(fn) {
    try {
      fn();
    } catch (e) {
      if (!PRODUCTION) {
        throw e;
      }
    }
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  var w = WINDOW || {};
  if (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};
  if (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};
  if (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};
  if (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];
  var namespace = w[NAMESPACE_IDENTIFIER];

  function defineIcons(prefix, icons) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _params$skipHooks = params.skipHooks,
        skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
    var normalized = Object.keys(icons).reduce(function (acc, iconName) {
      var icon = icons[iconName];
      var expanded = !!icon.icon;

      if (expanded) {
        acc[icon.iconName] = icon.icon;
      } else {
        acc[iconName] = icon;
      }

      return acc;
    }, {});

    if (typeof namespace.hooks.addPack === 'function' && !skipHooks) {
      namespace.hooks.addPack(prefix, normalized);
    } else {
      namespace.styles[prefix] = _objectSpread({}, namespace.styles[prefix] || {}, normalized);
    }
    /**
     * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
     * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
     * for `fas` so we'll easy the upgrade process for our users by automatically defining
     * this as well.
     */


    if (prefix === 'fas') {
      defineIcons('fa', icons);
    }
  }

  //brands
  var icons = 
  {
  };

  bunker(function () {
    defineIcons('fab', icons);
  });

}());
(function () {
  'use strict';

  var _WINDOW = {};
  var _DOCUMENT = {};

  try {
    if (typeof window !== 'undefined') _WINDOW = window;
    if (typeof document !== 'undefined') _DOCUMENT = document;
  } catch (e) {}

  var _ref = _WINDOW.navigator || {},
      _ref$userAgent = _ref.userAgent,
      userAgent = _ref$userAgent === void 0 ? '' : _ref$userAgent;

  var WINDOW = _WINDOW;
  var DOCUMENT = _DOCUMENT;
  var IS_BROWSER = !!WINDOW.document;
  var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === 'function' && typeof DOCUMENT.createElement === 'function';
  var IS_IE = ~userAgent.indexOf('MSIE') || ~userAgent.indexOf('Trident/');

  var NAMESPACE_IDENTIFIER = '___FONT_AWESOME___';
  var PRODUCTION = function () {
    try {
      return "production" === 'production';
    } catch (e) {
      return false;
    }
  }();

  function bunker(fn) {
    try {
      fn();
    } catch (e) {
      if (!PRODUCTION) {
        throw e;
      }
    }
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  var w = WINDOW || {};
  if (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};
  if (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};
  if (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};
  if (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];
  var namespace = w[NAMESPACE_IDENTIFIER];

  function defineIcons(prefix, icons) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _params$skipHooks = params.skipHooks,
        skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
    var normalized = Object.keys(icons).reduce(function (acc, iconName) {
      var icon = icons[iconName];
      var expanded = !!icon.icon;

      if (expanded) {
        acc[icon.iconName] = icon.icon;
      } else {
        acc[iconName] = icon;
      }

      return acc;
    }, {});

    if (typeof namespace.hooks.addPack === 'function' && !skipHooks) {
      namespace.hooks.addPack(prefix, normalized);
    } else {
      namespace.styles[prefix] = _objectSpread({}, namespace.styles[prefix] || {}, normalized);
    }
    /**
     * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
     * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
     * for `fas` so we'll easy the upgrade process for our users by automatically defining
     * this as well.
     */


    if (prefix === 'fas') {
      defineIcons('fa', icons);
    }
  }
// solid icon paths
  var icons = {
	  
	  
	"julian": [512, 512, [], "f2b9", "m 5.3571448,490.93979 c 0,-25.39641 1.9146219,-29.39 16.3410092,-34.08473 15.55429,-5.0618 35.019583,-13.00276 64.195218,-26.18877 14.742248,-6.66279 32.611158,-14.20331 39.708698,-16.7567 7.09754,-2.5534 23.00802,-9.57915 35.35663,-15.6128 20.97875,-10.25042 22.83185,-11.68257 28.24047,-21.82553 5.55968,-10.42623 5.70353,-11.47772 3.63972,-26.60495 -1.4369,-10.53216 -3.77731,-17.97358 -7.06478,-22.46277 -7.46019,-10.1872 -13.69148,-23.95783 -15.15946,-33.50116 -1.09937,-7.14698 -2.38832,-8.90915 -7.75768,-10.60579 -5.57508,-1.76162 -6.83089,-3.6476 -9.35756,-14.05317 -1.60507,-6.61016 -4.23286,-14.10408 -5.83954,-16.65314 -5.98462,-9.4949 -11.38476,-35.12604 -12.6502,-60.04266 -1.24813,-24.57595 -1.10403,-25.72485 5.90702,-47.09524 14.49016,-44.1675 14.45849,-44.1078 38.0113,-71.652847 6.91342,-8.085256 15.18406,-15.64782 18.37919,-16.805697 3.19512,-1.157877 7.33236,-4.521618 9.19386,-7.474982 2.46435,-3.909808 6.08737,-5.787387 13.32568,-6.905845 35.42855,-5.474385 56.14318,-2.261715 84.03661,13.033402 15.86518,8.699522 34.38438,21.689105 36.03671,25.276579 0.30843,0.669618 4.43746,6.580918 9.17564,13.136225 9.89163,13.685145 17.5878,28.748405 19.54297,38.250305 0.74372,3.61429 2.33057,22.83572 3.52635,42.71429 1.19576,19.87857 2.59794,40.57857 3.11594,46 0.58079,6.07861 0.29331,8.28596 -0.74992,5.75837 -1.56518,-3.79216 -1.95882,-3.67503 -5.26208,1.56579 -4.37228,6.93683 -4.77681,12.69513 -0.47666,6.78498 3.74994,-5.15395 4.10246,-3.16822 0.78234,4.40685 -2.7755,6.33251 -9.05382,7.84926 -7.22686,1.74591 1.31308,-4.38664 0.14539,-6.46405 -7.07952,-12.59523 l -5.16248,-4.38096 4.63569,6.31922 c 2.76611,3.77066 4.50836,9.0712 4.31998,13.14286 -0.27704,5.98793 -0.41835,6.13846 -1.15368,1.22912 -0.69529,-4.64199 -1.87687,-5.51976 -6.93979,-5.15538 -5.16435,0.37168 -6.30836,-0.53855 -7.44635,-5.9246 -0.7395,-3.50005 -2.21559,-5.8041 -3.28021,-5.1201 -1.0948,0.70338 -1.93568,-4.52198 -1.93568,-12.0285 0,-9.84731 -0.75307,-13.27214 -2.91837,-13.27214 -1.6051,0 -4.47161,-2.46429 -6.37,-5.47619 -1.89841,-3.01191 -4.56763,-5.47619 -5.93163,-5.47619 -1.87491,0 -1.86307,0.64133 0.0487,2.62857 3.84288,3.99485 3.0421,6.15206 -2.2125,5.9604 -2.60759,-0.0951 -3.54991,-0.67216 -2.09402,-1.28233 3.29237,-1.37989 1.31673,-5.11617 -2.70538,-5.11617 -1.77451,0 -2.48196,1.32274 -1.75736,3.28572 0.90076,2.44017 -0.3363,3.30364 -4.80719,3.35538 -5.21145,0.0603 -5.5625,0.43185 -2.61351,2.76604 4.99968,3.95735 0.66918,6.87426 -11.56335,7.78878 -7.22581,0.5402 -9.82955,0.0368 -8.79646,-1.70095 0.8071,-1.35757 3.05532,-2.19573 4.99606,-1.86258 1.99074,0.34171 3.5286,-0.82629 3.5286,-2.68 0,-1.95608 -2.34493,-3.5662 -5.79464,-3.97883 -3.18706,-0.38122 -5.79465,0.35807 -5.79465,1.64285 0,3.70513 -7.83954,2.71022 -9.27446,-1.17701 -0.74039,-2.00574 -2.64524,-2.97506 -4.43973,-2.25922 -1.9066,0.76056 -3.14295,-0.0117 -3.14295,-1.96321 0,-1.83018 -2.0438,-3.28333 -4.74107,-3.37092 -4.49972,-0.14613 -4.52654,-0.24385 -0.52679,-1.91977 2.40069,-1.0059 5.34779,-0.82422 6.84822,0.42217 5.04642,4.19201 2.59086,-0.73035 -3.40268,-6.82092 -5.68914,-5.78124 -5.8622,-6.48043 -3.00634,-12.14657 1.92921,-3.82764 4.1624,-5.56059 6.14605,-4.7693 1.75348,0.69949 2.55291,0.29616 1.82841,-0.92246 -0.70805,-1.19096 -5.65642,-2.16539 -10.99634,-2.16539 -5.33994,0 -9.25288,-0.47413 -8.69544,-1.05363 0.55747,-0.5795 13.71512,-1.51446 29.23924,-2.07768 20.09654,-0.72912 29.12531,-0.26795 31.34927,1.60125 2.45394,2.06249 2.78434,2.0383 1.54117,-0.11279 -0.87034,-1.50595 -0.63419,-2.73809 0.52474,-2.73809 1.15893,0 2.70273,1.00179 3.43066,2.22621 0.72793,1.22441 2.20622,1.65909 3.28508,0.96596 1.07883,-0.69314 1.96154,0.17103 1.96154,1.92039 0,1.74935 1.43654,3.75369 3.19234,4.45409 3.29308,1.31366 8.25656,12.11896 6.43618,14.01135 -0.56381,0.5861 -4.8765,-0.53632 -9.58375,-2.49427 -11.03786,-4.59114 -12.52589,-4.48531 -11.19723,0.79639 0.60273,2.39598 1.93628,3.81637 2.96345,3.15644 1.02716,-0.65994 1.86758,-0.24279 1.86758,0.92699 0,1.16977 2.40159,1.85281 5.33688,1.51785 3.59053,-0.40973 6.63835,1.11095 9.31415,4.64723 2.83261,3.74349 4.43344,4.48894 5.56233,2.59015 1.1235,-1.88976 2.04966,-1.43275 3.1806,1.56946 1.24041,3.29283 1.62851,2.62253 1.74364,-3.01151 0.19786,-9.68257 -4.08411,-38.19188 -6.14955,-40.94341 -0.90434,-1.20476 -2.28882,-5.32593 -3.07662,-9.15816 -0.78777,-3.83223 -2.79369,-8.14221 -4.45759,-9.57774 -3.69166,-3.18497 -3.69566,-3.43198 0.15824,9.77452 3.9962,13.69402 3.94664,16.62805 -0.2808,16.62805 -2.43943,0 -2.82298,-0.78432 -1.33894,-2.73809 3.239,-4.26425 -3.15024,-24.24729 -10.44373,-32.66393 -3.48509,-4.02174 -5.16725,-5.58726 -3.73814,-3.47893 1.89519,2.79589 1.94041,3.83333 0.1671,3.83333 -1.33722,0 -2.92392,-1.33456 -3.52603,-2.96569 -0.60212,-1.63113 -3.65406,-2.88443 -6.78209,-2.78512 -3.12804,0.0993 -8.16042,-0.52123 -11.18312,-1.37901 -4.99728,-1.41814 -5.40503,-1.06618 -4.49542,3.88035 1.09679,5.96433 -3.01574,7.66605 -5.07101,2.09833 -0.79142,-2.14399 -2.08931,-2.63325 -3.62135,-1.36513 -3.32314,2.75066 -15.19657,1.62809 -19.18619,-1.81394 -2.97482,-2.56653 -2.87478,-3.175 0.98401,-5.9847 5.56941,-4.05523 3.56086,-7.2089 -4.59127,-7.2089 -6.05448,0 -6.38102,0.41296 -5.19617,6.57143 0.94762,4.92548 0.48582,6.57143 -1.84375,6.57143 -1.70942,0 -3.10804,1.47857 -3.10804,3.28571 0,5.92041 -3.72261,3.45778 -9.75375,-6.45245 -4.69516,-7.71493 -8.27661,-10.67309 -17.23814,-14.23809 -6.22143,-2.47496 -12.97678,-4.49993 -15.01189,-4.49993 -9.0687,0 -18.20662,18.71527 -20.1223,41.21226 -1.67779,19.70334 -0.8968,21.01878 13.66179,23.01103 6.76602,0.92588 8.27498,0.7045 5.26786,-0.77287 -3.03097,-1.48907 -0.79257,-1.84626 7.97187,-1.27209 7.35718,0.48199 13.68537,2.20877 15.96949,4.35763 2.08082,1.9576 5.39152,3.55928 7.35707,3.55928 1.96556,0 4.59272,2.71071 5.83817,6.02381 3.1451,8.36656 -0.60471,39.38555 -6.17643,51.09239 -4.01278,8.4313 -4.09977,9.579 -1.08809,14.35715 1.80032,2.85632 4.82365,5.07897 6.71848,4.93922 2.93065,-0.2162 2.89445,-0.40371 -0.24234,-1.25587 -2.02813,-0.55095 -3.61264,-2.65446 -3.52115,-4.67445 0.10325,-2.27832 0.56986,-2.63317 1.22916,-0.93463 0.58455,1.50595 2.06033,2.73809 3.27952,2.73809 1.21919,0 4.50838,2.57055 7.3093,5.7123 4.8608,5.45232 5.27582,5.53991 9.11849,1.92482 2.21427,-2.08312 5.48357,-3.20603 7.26511,-2.49535 1.78157,0.7107 3.23921,0.79847 3.23921,0.19517 0,-0.60339 -2.13348,-1.98853 -4.74107,-3.07812 -4.12147,-1.72213 -3.71431,-1.99918 3.11553,-2.11988 7.62502,-0.13471 7.7851,-0.30204 5.43039,-5.67447 -1.8308,-4.17704 -1.83016,-6.15526 0.002,-8.06049 2.89225,-3.00663 9.30485,-0.009 23.22004,10.85801 5.0142,3.91548 10.46643,7.11905 12.11607,7.11905 1.64962,0 2.99931,0.98572 2.99931,2.19048 0,1.20476 1.35843,2.19047 3.01872,2.19047 3.15154,0 6.71434,8.13598 4.54868,10.38731 -0.68528,0.71238 -1.24597,0.2521 -1.24597,-1.02287 0,-1.27494 -2.33707,-2.92783 -5.19348,-3.67312 -3.22654,-0.84182 -4.7775,-2.48194 -4.09512,-4.33053 0.64539,-1.74835 -0.67376,-3.45727 -3.19852,-4.14361 -3.81085,-1.03599 -4.02622,-0.64231 -1.90391,3.48012 3.63017,7.05125 4.56201,24.00562 1.25712,22.87227 -1.46832,-0.50355 -3.74511,-3.13851 -5.05954,-5.85551 -3.86288,-7.98473 -6.01585,-9.13177 -6.3417,-3.37868 -0.16668,2.94244 0.56438,4.79265 1.6245,4.11152 1.87281,-1.20323 8.16065,11.73029 8.16065,16.78573 0,1.55042 -2.17647,2.08367 -5.67049,1.38933 -3.32644,-0.66104 -7.78665,0.31455 -10.78973,2.36007 -2.81559,1.9178 -9.1984,3.56662 -14.18402,3.66403 -5.15597,0.10076 -10.7253,1.70909 -12.91563,3.72987 -2.11795,1.95402 -5.74727,4.04288 -8.06513,4.64195 -4.00846,1.03599 -3.98273,1.1665 0.52679,2.67208 5.36463,1.7911 6.39895,5.4529 1.54021,5.4529 -2.4056,0 -2.85471,1.43371 -1.80765,5.7705 1.34998,5.59152 1.17148,5.71927 -5.75451,4.11904 -3.93123,-0.9083 -11.56564,-1.68445 -16.96534,-1.72478 -8.27601,-0.0618 -10.17853,-0.89676 -12.11606,-5.31734 -1.26366,-2.88431 -2.29796,-6.64538 -2.29796,-8.35802 0,-2.05259 -1.25681,-2.62426 -3.6875,-1.67727 -3.07438,1.19773 -3.25789,0.88627 -1.10371,-1.87325 2.73406,-3.50235 0.0498,-8.45848 -4.58557,-8.4667 -2.55827,-0.004 -12.90284,-16.51923 -14.40441,-22.99608 -0.61285,-2.64351 -1.1126,-1.33468 -1.26009,3.30018 -0.51083,16.05266 8.16978,32.84268 16.98002,32.84268 4.63585,0 5.11245,4.01363 0.68626,5.77929 -1.73839,0.69348 -3.16071,2.24657 -3.16071,3.45133 0,1.20477 1.3902,1.63592 3.08933,0.9581 2.41518,-0.96344 2.82957,0.11784 1.89896,4.95488 -1.33749,6.95193 2.05981,11.19234 18.19028,22.70463 5.21518,3.72208 10.12467,7.76093 10.91001,8.97524 0.78533,1.21429 10.26747,3.31559 21.07143,4.66955 l 19.64356,2.46172 -13.16964,6.1661 c -12.87981,6.0304 -13.16964,6.35354 -13.16964,14.6834 0,8.16011 -0.24304,8.46045 -5.79465,7.16104 -3.18705,-0.74597 -8.36384,-3.22903 -11.50397,-5.51792 -3.14012,-2.28892 -7.11407,-4.16164 -8.83099,-4.16164 -1.71692,0 -3.70771,-0.98572 -4.42397,-2.19048 -1.72909,-2.90838 -5.26785,-2.80328 -5.26785,0.1564 0,1.2908 -1.43104,3.83456 -3.18008,5.65279 -1.74905,1.8182 -2.8169,3.96566 -2.37301,4.7721 0.44388,0.80645 5.66778,12.18179 11.60866,25.27854 10.33174,22.77657 13.24183,34.23541 8.69443,34.23541 -3.30788,0 -2.46603,6.90946 1.38015,11.32752 4.456,5.11855 1.08069,5.08237 -4.83037,-0.0517 -7.72628,-6.71086 -17.37074,-30.58744 -20.70219,-51.25202 -0.9943,-6.16751 -2.33406,-8.21429 -5.37682,-8.21429 -3.75429,0 -3.97685,1.33006 -3.02392,18.07143 0.56574,9.93929 2.03749,23.30658 3.27055,29.70511 1.23305,6.39854 1.77514,12.89823 1.20463,14.44374 -0.70463,1.90887 0.45761,2.51296 3.62411,1.8837 3.38822,-0.67331 5.30233,0.53599 7.00797,4.42752 2.23593,5.10143 19.37649,21.27803 22.54597,21.27803 0.82794,0 0.96733,-1.97143 0.30977,-4.38096 -0.65757,-2.40952 -1.71525,-6.29234 -2.35041,-8.6285 -1.54706,-5.6902 6.30508,-10.44218 10.81925,-6.54757 1.69048,1.45846 2.57921,4.27099 1.97497,6.25008 -0.86773,2.84212 0.33979,3.58274 5.74558,3.52408 3.88574,-0.0421 6.95872,-1.25786 7.1091,-2.81237 0.54253,-5.6083 0.90462,-5.94699 2.92733,-2.7381 1.13912,1.80715 1.52336,5.99643 0.85388,9.30953 -0.66948,3.31309 -0.32301,6.02381 0.76997,6.02381 3.89623,0 12.85477,-11.38785 14.28546,-18.15927 1.67554,-7.93038 1.69467,-7.97675 12.6736,-30.72364 4.54496,-9.41655 9.62635,-18.28798 11.29201,-19.71429 2.5161,-2.15455 2.74143,-1.85209 1.33192,1.78767 -0.93308,2.40953 -1.98029,6.64589 -2.32715,9.41412 -0.34685,2.76826 -1.83431,6.54087 -3.30547,8.38359 -1.47114,1.84274 -2.85073,7.69061 -3.06577,12.99526 -0.21501,5.30466 -1.87729,12.00302 -3.69397,14.88525 -1.81665,2.88223 -2.87561,7.58372 -2.35321,10.44776 0.52238,2.86405 0.38615,3.97521 -0.30276,2.46926 -0.68888,-1.50595 -1.96097,-2.73809 -2.82685,-2.73809 -2.77273,0 -14.48807,18.53659 -15.24992,24.12914 -0.97688,7.17116 -7.47737,8.46687 -8.7142,1.73698 l -0.92931,-5.0566 -0.28695,4.92857 c -0.15783,2.71072 -1.63026,4.92857 -3.27208,4.92857 -1.6418,0 -3.53823,1.23215 -4.21428,2.7381 -0.98332,2.19047 -1.475,2.19047 -2.45832,0 -0.67606,-1.50595 -2.14868,-2.7381 -3.27252,-2.7381 -1.12383,0 -5.53189,-2.46428 -9.79569,-5.47619 -4.26378,-3.0119 -8.26482,-5.47619 -8.89117,-5.47619 -0.62635,0 -2.92611,3.45 -5.11054,7.66667 l -3.97169,7.66667 -105.02534,0 -105.0253252,0 0,-21.41736 z m 246.7971952,7.69036 c -2.08106,-2.14723 -2.32309,-1.89563 -1.17958,1.22623 0.79129,2.16029 1.96952,3.37601 2.61829,2.70158 0.64877,-0.67442 0.001,-2.44192 -1.43871,-3.92781 z m -12.90434,0.7633 c 0,-1.10624 -0.55934,-3.5266 -1.24298,-5.37863 -0.97864,-2.65111 -1.82999,-2.80569 -4.00298,-0.72676 -1.92098,1.83784 -2.10525,3.47285 -0.60614,5.37861 2.51993,3.20348 5.8521,3.61731 5.8521,0.72678 z m 6.61363,-12.22678 c 1.34752,-1.44517 3.4858,-0.32721 6.28443,3.28571 3.55188,4.58537 3.8784,4.70225 2.00716,0.71844 -3.98265,-8.47899 -8.67161,-12.13148 -11.94668,-9.30591 -2.30699,1.99033 -3.33319,1.43399 -4.91104,-2.66251 -1.38098,-3.58532 -2.03575,-4.03897 -2.12821,-1.47454 -0.0735,2.03723 0.70716,4.2442 1.73471,4.90439 1.02754,0.66017 2.62457,4.90763 3.54897,9.43879 1.4537,7.12581 1.79466,7.49887 2.52444,2.7623 0.46404,-3.01191 1.76284,-6.46191 2.88622,-7.66667 z m 10.7703,-199.31185 c 13.30749,-2.21501 8.81985,-5.49262 -6.84821,-5.00169 -9.87614,0.30945 -14.75,1.3365 -14.75,3.1082 0,2.7938 5.23214,4.6556 10.53571,3.74902 1.7384,-0.29716 6.71652,-1.13214 11.0625,-1.85553 z m 22.65179,-4.65791 c 0,-0.46187 -2.4265,-0.83977 -5.39222,-0.83977 -2.96572,0 -4.8612,0.89317 -4.21218,1.98484 1.07955,1.81586 9.6044,0.79948 9.6044,-1.14507 z m -32.30134,-13.07106 c 0.70437,-1.90814 1.85987,-2.54491 2.56778,-1.41505 1.69573,2.70649 36.05499,5.07635 36.05499,2.48683 0,-1.09083 -1.42232,-1.98334 -3.16072,-1.98334 -4.29846,0 -3.99116,-3.68016 0.52679,-6.30851 2.02812,-1.17988 3.6875,-2.95386 3.6875,-3.94218 0,-0.98832 0.94821,-1.47441 2.10714,-1.08021 1.15893,0.3942 -0.67785,-2.31652 -4.08172,-6.02381 -6.24992,-6.80701 -11.72185,-8.80584 -11.72185,-4.28185 0,1.69873 -0.97696,1.61582 -3.16071,-0.26821 -2.58865,-2.23334 -3.16072,-2.08366 -3.16072,0.82704 0,2.41853 -1.85521,3.55392 -5.80705,3.55392 -4.42572,0 -6.47266,1.56316 -8.60519,6.57142 -2.45872,5.77434 -3.86295,6.57551 -11.57688,6.60497 -10.53365,0.0403 -17.09466,3.269 -11.32212,5.57174 2.01295,0.80298 5.54219,0.9483 7.84272,0.3229 2.30054,-0.62538 4.18281,-0.24365 4.18281,0.84832 0,3.33334 4.26407,2.20884 5.62723,-1.48398 z m -74.8444,-23.51255 c -1.31402,-1.64592 -1.76521,-3.64116 -1.00265,-4.43389 2.09867,-2.18167 10.9849,-1.72614 15.51728,0.79545 3.282,1.82593 5.5444,0.80546 12.31799,-5.55608 6.65307,-6.24836 8.2301,-9.18791 7.95713,-14.832 -0.30917,-6.39258 -0.89446,-6.9715 -6.37181,-6.30253 -3.58193,0.43746 -5.50998,-0.14041 -4.74753,-1.42282 0.7512,-1.26353 -2.86603,-2.52928 -8.71863,-3.05083 -6.93337,-0.61789 -10.53957,0.0239 -11.75292,2.09191 -1.29951,2.21474 -2.47255,2.36028 -4.55348,0.56496 -1.96949,-1.69917 -3.21541,-1.72465 -4.18979,-0.0856 -0.76272,1.28291 -2.20852,1.80462 -3.21288,1.15935 -1.00436,-0.64529 -0.93884,2.04284 0.1456,5.9736 1.08445,3.93077 1.97172,11.94097 1.97172,17.80045 0,8.56991 0.61818,10.40697 3.16071,9.39272 1.73839,-0.69347 3.16072,-0.14173 3.16072,1.22596 0,1.36776 0.60922,1.85349 1.35384,1.07942 0.74461,-0.77404 0.27873,-2.75404 -1.03529,-4.39994 z m 180.89574,-11.3514 c 0,-1.80714 -0.94822,-3.28571 -2.10714,-3.28571 -1.15893,0 -2.10715,1.47857 -2.10715,3.28571 0,1.80715 0.94822,3.28572 2.10715,3.28572 1.15892,0 2.10714,-1.47857 2.10714,-3.28572 z m -11.13081,-24.61273 c -0.48433,-3.32966 -0.89356,-1.12536 -0.90938,4.89845 -0.0147,6.02381 0.38046,8.74808 0.88061,6.05393 0.50015,-2.69416 0.51311,-7.62273 0.0287,-10.95238 z m -38.74554,-6.23521 c -1.68674,-4.56941 -4.90937,-3.7766 -4.90937,1.20777 0,2.8489 1.02741,3.90236 3.02767,3.10444 1.66522,-0.66428 2.51197,-2.60478 1.8817,-4.31221 z M 196.6715,198.77419 c 9.22079,0.1924 15.18565,-2.35872 15.18565,-6.49478 0,-3.61151 -15.79026,-1.91433 -22.65179,2.43468 -3.76652,2.38731 -6.84821,4.90608 -6.84821,5.59728 0,0.69118 1.04897,0.58276 2.33105,-0.24094 1.28207,-0.8237 6.67456,-1.40701 11.9833,-1.29624 z m 110.00708,-19.36943 c 0,-1.20476 -3.0817,-2.12119 -6.84822,-2.03652 -5.73887,0.12902 -6.16554,0.45892 -2.63393,2.03652 5.82141,2.60048 9.48215,2.60048 9.48215,0 z m -86.96354,-12.27579 c -0.7002,-0.72788 -2.51761,-0.8057 -4.0387,-0.17294 -1.68093,0.69926 -1.18163,1.2183 1.27308,1.32341 2.22126,0.0951 3.4658,-0.4226 2.76562,-1.15048 z m 44.82068,-46.86707 c 0,-1.20476 -1.47829,-2.19047 -3.28508,-2.19047 -1.80679,0 -2.69904,0.98571 -1.98278,2.19047 0.71626,1.20477 2.19455,2.19048 3.28508,2.19048 1.09053,0 1.98278,-0.98571 1.98278,-2.19048 z m 12.64286,-2.00616 c 0,-0.8456 -1.42464,-3.45086 -3.16588,-5.78946 -3.09232,-4.15317 -3.13277,-4.15406 -1.74132,-0.0384 1.12812,3.33683 0.68058,3.91684 -2.15074,2.78739 -2.99263,-1.1938 -3.21871,-0.7336 -1.38724,2.82386 2.00035,3.88555 8.44518,4.05083 8.44518,0.21657 z m 4.47576,-7.33987 c -2.08106,-2.14725 -2.32309,-1.89564 -1.17958,1.22622 0.79129,2.16029 1.96952,3.37601 2.61829,2.70159 0.64877,-0.67442 0.001,-2.44193 -1.43871,-3.92781 z m 65.48296,-9.8566 c -1.39158,-0.4822 -2.53015,-2.273161 -2.53015,-3.979905 0,-1.706747 -1.00418,-3.103176 -2.23151,-3.103176 -1.22733,0 -1.63095,-1.010136 -0.89695,-2.244749 0.73401,-1.234612 0.20482,-1.973898 -1.17608,-1.642858 -1.38085,0.331043 -2.80252,-1.213429 -3.15924,-3.432156 -0.93462,-5.813235 -2.26383,-6.551791 -6.6014,-3.668012 -2.99924,1.994004 -3.07936,2.312438 -0.36405,1.44695 4.83515,-1.541173 6.47131,0.819492 3.34844,4.83119 -1.75751,2.257741 -1.81054,2.85837 -0.16162,1.830754 1.47738,-0.920741 4.27432,1.532518 7.02819,6.164596 2.65782,4.470516 5.55885,7.061366 6.9244,6.184036 1.68867,-1.08494 1.63801,-1.7567 -0.17995,-2.38667 z M 327.75,98.357142 c -1.73839,-1.167866 -4.10892,-2.123391 -5.26785,-2.123391 -1.15893,0 -0.68482,0.955525 1.05357,2.123391 1.73839,1.167865 4.10893,2.123388 5.26786,2.123388 1.15892,0 0.68482,-0.955523 -1.05358,-2.123388 z M 313.87637,88.190169 c 1.10976,-3.006367 0.80143,-3.141885 -1.8817,-0.827025 -3.6564,3.154561 -4.03695,4.422569 -1.32725,4.422569 1.03494,0 2.47897,-1.617995 3.20895,-3.595544 z m 7.55221,1.405068 c 0,-1.204762 -0.89225,-2.190476 -1.98278,-2.190476 -1.09053,0 -2.56882,0.985714 -3.28508,2.190476 -0.71626,1.204762 0.17595,2.190476 1.98278,2.190476 1.80679,0 3.28508,-0.985714 3.28508,-2.190476 z m -1.17762,-11.977956 c -2.24963,-1.768827 -4.98264,-3.247398 -6.07334,-3.285714 -1.0907,-0.03831 -0.14244,1.377558 2.10715,3.146387 2.24962,1.768827 4.98263,3.247398 6.07333,3.285714 1.0907,0.03831 0.14244,-1.377557 -2.10714,-3.146387 z M 306.93579,61.830957 c -2.48398,-4.44057 -3.08382,-3.019256 -1.05047,2.489122 0.72262,1.957635 1.75776,3.0979 2.30028,2.533921 0.54253,-0.56398 -0.019,-2.82435 -1.24981,-5.023043 z m 26.26579,430.901163 c 0.10115,-10.79171 -0.5023,-19.18053 -1.34079,-18.64181 -0.83848,0.53871 -2.12202,-1.2273 -2.85227,-3.92447 -1.30068,-4.80389 -1.39156,-4.81719 -4.45385,-0.65193 -3.07352,4.18048 -3.12609,4.17563 -3.12609,-0.28764 0,-4.34435 -13.3225,-17.0844 -17.88185,-17.10008 -3.52453,-0.0131 -3.5573,-6.82014 -0.0474,-9.84829 4.79282,-4.13499 10.36779,-0.26856 23.95819,16.61581 6.21323,7.71917 12.13957,14.03486 13.16965,14.03486 1.03005,0 1.87284,-8.28061 1.87284,-18.40138 0,-10.12074 1.94903,-30.08146 4.33119,-44.35714 2.38215,-14.27566 4.40362,-31.16829 4.49216,-37.53913 l 0.16099,-11.58339 4.87715,7.46122 c 3.78409,5.78903 11.36388,10.75018 33.82052,22.13634 15.91888,8.07129 34.16583,15.6787 40.54881,16.90533 6.38296,1.2266 18.29982,4.92677 26.48192,8.22256 8.1821,3.29579 23.64753,9.33051 34.36762,13.41047 l 19.49107,7.41813 0,37.87778 0,37.87779 -39.14957,0 -39.14956,0 1.52372,-7.11905 c 2.68519,-12.54571 2.35433,-13.27168 -7.41407,-16.26836 -10.78785,-3.30944 -12.34117,-2.32942 -14.94493,9.42912 -1.52637,6.89312 -1.22288,8.99504 1.62012,11.22019 2.83704,2.22051 -4.44468,2.73774 -38.52047,2.73623 l -42.01881,-0.002 0.18374,-19.6213 z M 275.07143,359.26165 c 0,-1.6737 4.27232,-3.86352 20.8903,-10.70757 6.33414,-2.6087 -0.37598,4.10471 -8.30646,8.31056 -8.92582,4.73368 -12.58384,5.43049 -12.58384,2.39701 z m 63.21429,-60.85927 c 0,-12.14474 2.1905,-22.61667 4.73094,-22.61667 2.90058,0 0.91983,25.66862 -2.23374,28.94691 -1.92484,2.00095 -2.4972,0.55007 -2.4972,-6.33024 z"],
  };

  bunker(function () {
    defineIcons('far', icons);
  });

}());
(function () {
  'use strict';

  var _WINDOW = {};
  var _DOCUMENT = {};

  try {
    if (typeof window !== 'undefined') _WINDOW = window;
    if (typeof document !== 'undefined') _DOCUMENT = document;
  } catch (e) {}

  var _ref = _WINDOW.navigator || {},
      _ref$userAgent = _ref.userAgent,
      userAgent = _ref$userAgent === void 0 ? '' : _ref$userAgent;

  var WINDOW = _WINDOW;
  var DOCUMENT = _DOCUMENT;
  var IS_BROWSER = !!WINDOW.document;
  var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === 'function' && typeof DOCUMENT.createElement === 'function';
  var IS_IE = ~userAgent.indexOf('MSIE') || ~userAgent.indexOf('Trident/');

  var NAMESPACE_IDENTIFIER = '___FONT_AWESOME___';
  var PRODUCTION = function () {
    try {
      return "production" === 'production';
    } catch (e) {
      return false;
    }
  }();

  function bunker(fn) {
    try {
      fn();
    } catch (e) {
      if (!PRODUCTION) {
        throw e;
      }
    }
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  var w = WINDOW || {};
  if (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};
  if (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};
  if (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};
  if (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];
  var namespace = w[NAMESPACE_IDENTIFIER];

  function defineIcons(prefix, icons) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _params$skipHooks = params.skipHooks,
        skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
    var normalized = Object.keys(icons).reduce(function (acc, iconName) {
      var icon = icons[iconName];
      var expanded = !!icon.icon;

      if (expanded) {
        acc[icon.iconName] = icon.icon;
      } else {
        acc[iconName] = icon;
      }

      return acc;
    }, {});

    if (typeof namespace.hooks.addPack === 'function' && !skipHooks) {
      namespace.hooks.addPack(prefix, normalized);
    } else {
      namespace.styles[prefix] = _objectSpread({}, namespace.styles[prefix] || {}, normalized);
    }
    /**
     * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
     * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
     * for `fas` so we'll easy the upgrade process for our users by automatically defining
     * this as well.
     */


    if (prefix === 'fas') {
      defineIcons('fa', icons);
    }
  }

//regular icons
  var icons = {
    "julian": [512, 512, [], "f2b9", "m 1.7857317,491.63041 c 0,-25.42442 1.925439,-29.42242 16.4333313,-34.12234 15.642167,-5.06738 35.217434,-13.01709 64.557903,-26.21766 14.825536,-6.67013 32.795404,-14.21897 39.933044,-16.77519 7.13764,-2.5562 23.13801,-9.58971 35.55639,-15.63001 21.09727,-10.26173 22.96083,-11.69546 28.40001,-21.84961 5.59109,-10.43773 5.73575,-11.49039 3.66029,-26.6343 -1.44502,-10.54378 -3.79866,-17.99341 -7.1047,-22.48755 -7.50234,-10.19845 -13.76883,-23.98426 -15.24511,-33.53813 -1.10558,-7.15485 -2.40181,-8.91897 -7.8015,-10.61748 -5.60658,-1.76356 -6.86948,-3.65163 -9.41043,-14.06867 -1.61414,-6.61745 -4.25678,-14.11965 -5.87253,-16.67152 -6.01843,-9.50537 -11.44909,-35.16478 -12.72167,-60.1089 -1.25519,-24.60306 -1.11027,-25.75322 5.94039,-47.14719 14.57203,-44.21623 14.54018,-44.15646 38.22606,-71.731898 6.95248,-8.094175 15.26984,-15.665083 18.48302,-16.824237 3.21318,-1.159155 7.37379,-4.526607 9.24581,-7.483229 2.47827,-3.914121 6.12176,-5.793772 13.40096,-6.913462 35.62871,-5.480425 56.46037,-2.26421 84.51139,13.047779 15.95482,8.70912 34.57864,21.713033 36.24032,25.304465 0.31016,0.670357 4.46252,6.588178 9.22747,13.150713 18.0011,24.792099 22.99582,43.224289 23.03776,85.017289 0.008,8.81336 1.10769,22.86451 2.44186,31.2248 2.29084,14.35492 2.14368,15.7508 -2.64516,25.09246 -4.91172,9.58131 -11.90765,14.03633 -9.50751,6.05437 1.31525,-4.37398 0.16126,-6.43642 -7.05533,-12.60913 l -5.12748,-4.38578 4.76822,6.80776 c 3.01932,4.31081 4.51137,9.1367 4.06796,13.15736 -0.6433,5.8329 -1.43206,6.37535 -9.69299,6.66625 -6.18934,0.21797 -8.53269,-0.45365 -7.51701,-2.15434 2.01178,-3.36854 2.54333,-10.31048 1.2434,-16.23853 -1.97176,-8.99176 -4.86464,-2.68365 -4.86464,10.60765 0,12.837 0.0975,13.05618 4.76786,10.71408 4.15433,-2.08335 4.31555,-2.01046 1.25289,0.5665 -1.93323,1.62664 -3.78892,4.39478 -4.12378,6.15143 -0.9912,5.20003 2.39262,13.06193 5.62196,13.06193 3.69109,0 2.34679,15.91308 -2.5472,30.15227 -3.64798,10.61388 -9.11777,12.53146 -9.38267,3.28934 -0.16868,-5.88772 -0.2449,-5.84877 -3.21568,1.64467 -1.67356,4.22131 -3.9712,9.15532 -5.10587,10.96447 -1.13466,1.80913 -4.58193,8.22334 -7.66057,14.25379 -5.48439,10.74283 -17.86268,23.63366 -27.83523,28.98779 -2.76142,1.48255 -9.83321,3.3562 -15.71509,4.16364 -6.19388,0.85029 -12.91717,3.4467 -15.97633,6.16979 -5.03208,4.47925 -5.15416,5.14319 -2.58026,14.03344 3.76803,13.01487 -0.12884,16.97892 -16.11837,16.39616 l -11.57214,-0.42179 0.0127,9.19336 c 0.006,5.05632 1.30334,11.75215 2.88033,14.87956 1.57702,3.12744 3.5215,9.29495 4.32108,13.70558 0.79956,4.41066 2.48333,8.01935 3.74167,8.01935 1.40433,0 1.80415,2.50307 1.0353,6.48135 -0.98803,5.11225 -0.59636,6.22073 1.85417,5.24762 1.70871,-0.67858 3.10678,-0.0344 3.10678,1.43149 0,1.83078 -1.82448,2.16779 -5.82739,1.07636 -3.20506,-0.87386 -7.25773,-1.72094 -9.00595,-1.88237 -11.1385,-1.02865 -23.7687,-25.18827 -28.52662,-54.56764 -0.99991,-6.17431 -2.34724,-8.22335 -5.4072,-8.22335 -3.77549,0 -3.99931,1.33152 -3.041,18.09136 0.56894,9.95025 2.049,23.3323 3.28903,29.73789 1.24002,6.40559 1.78517,12.91246 1.21143,14.45967 -0.70861,1.91098 0.4602,2.51573 3.64459,1.88578 3.40736,-0.67406 5.33228,0.53658 7.04756,4.43241 2.24857,5.10705 19.48597,21.30149 22.67336,21.30149 0.83261,0 0.97279,-1.9736 0.31152,-4.38578 -0.66129,-2.41219 -1.72495,-6.29928 -2.36369,-8.63802 -1.55581,-5.69648 6.34069,-10.4537 10.88037,-6.5548 1.70003,1.46007 2.59378,4.2757 1.98612,6.25698 -0.85976,2.80329 0.30317,3.58583 5.24284,3.52796 3.49124,-0.0408 6.43189,-1.06116 6.53481,-2.26724 0.32959,-3.86217 4.4692,-7.67513 8.33269,-7.67513 2.16011,0 4.27479,-2.1684 4.98982,-5.11659 0.68253,-2.81412 3.885,-9.83807 7.11664,-15.60875 3.23163,-5.77068 8.25962,-14.79463 11.17331,-20.05321 5.80424,-10.47543 29.2564,-39.26204 31.98635,-39.26204 0.93859,0 2.94615,-1.43261 4.46127,-3.18357 2.3781,-2.74829 2.24772,-2.78655 -0.95357,-0.27972 -5.48808,4.29752 -4.63237,2.10569 5.01439,-12.84387 9.4479,-14.64135 13.41901,-16.39185 6.74192,-2.97185 -2.27529,4.57301 -11.34094,22.62317 -20.14585,40.11149 -18.60291,36.94906 -23.40332,54.26513 -17.83088,64.31983 5.91704,10.67647 4.72427,12.70885 -7.13017,12.14908 -12.12292,-0.57242 -10.8875,-1.35167 -16.66788,10.51296 -2.54582,5.22546 -7.2065,10.55715 -10.8914,12.45948 -3.5427,1.82892 -5.89213,2.40585 -5.22099,1.28208 0.67115,-1.12379 -0.1869,-2.04325 -1.90678,-2.04325 -1.71989,0 -3.68329,1.2335 -4.36316,2.74111 -0.98888,2.19289 -1.48334,2.19289 -2.47221,0 -0.67988,-1.50761 -2.16082,-2.74111 -3.29101,-2.74111 -1.13017,0 -5.56314,-2.46701 -9.85103,-5.48223 -4.28787,-3.01523 -8.31152,-5.48223 -8.94141,-5.48223 -0.62988,0 -2.94263,3.4538 -5.13941,7.67512 l -3.99413,7.67512 -105.61869,0 -105.6186983,0 0,-21.44098 z m 253.5700783,9.9283 c -0.58785,-1.50762 -1.06883,-0.27412 -1.06883,2.74111 0,3.01524 0.48098,4.24873 1.06883,2.74112 0.58784,-1.50762 0.58784,-3.97462 0,-5.48223 z m -42.29287,-1.09645 c 2.03952,-3.31675 4.52993,-6.63613 5.53423,-7.37641 2.64941,-1.9529 -18.95991,-23.60272 -22.95319,-22.99621 -1.85032,0.28103 -5.73717,3.15929 -8.63746,6.39611 -2.90029,3.23683 -6.15468,5.88515 -7.23198,5.88515 -2.90247,0 -6.76501,-8.48869 -5.11766,-11.24705 2.61673,-4.38151 9.65155,-44.49171 10.3348,-58.92552 0.3711,-7.83959 1.34144,-16.72081 2.15631,-19.73604 0.90065,-3.33265 0.75276,-4.43332 -0.37715,-2.80714 -2.41663,3.47802 -46.57949,25.18335 -63.73197,31.32326 -7.31851,2.61974 -25.436368,10.22054 -40.261904,16.89069 -27.479581,12.36331 -48.636485,21.02275 -61.919806,25.34355 -12.1944929,3.96661 -12.7142853,4.98494 -12.7142853,24.90898 l 0,18.37109 100.6059153,0 100.60591,0 3.70824,-6.03046 z m 36.91432,-1.133 c -2.09281,-2.1496 -2.33621,-1.89773 -1.18624,1.22758 0.79576,2.16267 1.98065,3.37973 2.63308,2.70456 0.65244,-0.67517 10e-4,-2.44462 -1.44684,-3.93214 z m -12.97724,0.76414 c 0,-1.10746 -0.5625,-3.5305 -1.25,-5.38456 -0.98417,-2.65404 -1.84033,-2.80879 -4.0256,-0.72756 -1.93183,1.83986 -2.11714,3.47668 -0.60957,5.38454 2.53417,3.20702 5.88517,3.62129 5.88517,0.72758 z m 6.65099,-12.24028 c 1.35513,-1.44675 3.5055,-0.32756 6.31994,3.28934 3.57195,4.59043 3.90031,4.70744 2.01849,0.71923 -4.00514,-8.48833 -8.7206,-12.14486 -12.01417,-9.31617 -2.32002,1.99252 -3.35202,1.43557 -4.93878,-2.66544 -1.38878,-3.58929 -2.04725,-4.04344 -2.14024,-1.47617 -0.0739,2.03948 0.71115,4.24888 1.74451,4.9098 1.03335,0.66089 2.6394,4.91305 3.56903,9.4492 1.46191,7.13367 1.80479,7.50715 2.5387,2.76535 0.46666,-3.01523 1.77279,-6.46904 2.90252,-7.67514 z m 26.36074,-17.23113 c 1.61243,-7.59722 1.67761,-7.75749 11.65438,-28.66041 3.98782,-8.35505 9.51474,-18.01805 12.28209,-21.47331 2.76735,-3.45525 4.58918,-6.74005 4.04852,-7.29956 -1.49587,-1.54799 -7.3443,5.83392 -13.21686,16.68233 -2.8994,5.35614 -7.44021,13.68565 -10.09065,18.51002 -2.65044,4.82436 -5.85838,11.73197 -7.12873,15.35024 -1.30783,3.72503 -4.08732,6.85372 -6.40768,7.21274 -3.22553,0.49908 -4.14558,2.51397 -4.32169,9.46439 l -0.22375,8.83034 5.98622,-5.93501 c 3.29241,-3.26429 6.63059,-8.97106 7.41815,-12.68177 z m 19.4727,5.17023 c -2.35304,-3.89908 -5.86538,-5.96263 -5.86538,-3.44599 0,1.23384 6.39088,7.83177 7.58598,7.83177 0.50938,0 -0.2649,-1.9736 -1.7206,-4.38578 z M 186.97569,463.55195 c 2.4539,-6.61762 1.46237,-23.27224 -1.32821,-22.30965 -2.99391,1.03276 -6.75819,18.00493 -5.02813,22.67055 1.53167,4.13056 4.75879,3.94733 6.35634,-0.3609 z m 49.64994,-8.22484 c 0.37683,-2.01119 -0.26257,-3.65671 -1.42091,-3.65671 -1.15833,0 -2.72971,-3.20711 -3.49198,-7.1269 -0.76224,-3.9198 -2.79682,-10.3491 -4.52124,-14.28732 -1.78271,-4.0713 -2.85726,-11.63965 -2.49079,-17.54313 l 0.64455,-10.38274 12.15797,-0.0822 c 15.48159,-0.10459 17.56148,-2.14574 14.15961,-13.89589 -2.33253,-8.05651 -2.18245,-9.53092 1.38526,-13.61061 3.99267,-4.56556 3.98887,-4.56948 -1.78536,-1.8469 -4.63071,2.18343 -5.78653,4.1995 -5.78653,10.09331 0,6.90168 -0.36653,7.27951 -5.82738,6.00713 -3.20506,-0.74679 -8.41109,-3.23258 -11.56896,-5.52401 -3.15787,-2.29137 -7.15427,-4.16616 -8.88089,-4.16616 -1.72662,0 -3.72865,-0.98681 -4.44896,-2.19289 -1.73887,-2.9116 -5.29762,-2.80639 -5.29762,0.15657 0,1.29222 -1.43912,3.83879 -3.19805,5.65902 -1.75892,1.82021 -2.83281,3.97004 -2.38641,4.77738 0.44639,0.80732 5.6998,12.19522 11.67424,25.30641 10.8149,23.73387 12.10744,29.21583 8.8565,37.56245 -0.93952,2.41219 -0.88712,5.45549 0.11655,6.76291 2.7494,3.58174 11.32961,2.15785 12.11046,-2.00974 z m -16.67375,-16.26585 c -0.12481,-5.00122 -10.27824,-24.64373 -10.40372,-20.12667 -0.15228,5.48148 6.46488,23.96423 8.57962,23.96423 1.05592,0 1.87678,-1.7269 1.8241,-3.83756 z m 80.88252,-29.6406 c -2.09281,-2.14961 -2.3362,-1.89773 -1.18624,1.22757 0.79577,2.16268 1.98065,3.37974 2.63309,2.70456 0.65243,-0.67516 10e-4,-2.4446 -1.44685,-3.93213 z m 10.33229,-6.22852 c 0,-1.07704 -0.95357,-1.95827 -2.11905,-1.95827 -1.16547,0 -2.11905,1.04504 -2.11905,2.32231 0,1.27727 -1.1009,1.61821 -2.44646,0.75762 -1.48142,-0.94748 -1.8726,-0.60381 -0.99165,0.87126 1.60626,2.68956 7.67621,1.11369 7.67621,-1.99292 z M 197.37487,387.32943 c 0.5996,-1.617 0.23944,-4.3307 -0.80036,-6.03045 -1.3759,-2.24919 -1.89938,-1.44887 -1.92299,2.93996 -0.0352,6.54849 1.00383,7.72762 2.72335,3.09049 z m 42.40956,-12.01547 c 0.67261,-3.4802 3.33623,-7.25037 6.09226,-8.62315 4.6743,-2.32829 4.57742,-2.44604 -2.12907,-2.58771 -6.96069,-0.14692 -13.93426,-3.00023 -18.62823,-7.62166 -1.3378,-1.31712 -7.80613,-6.34198 -14.37405,-11.16634 -7.64296,-5.61402 -12.8453,-11.3291 -14.45191,-15.87631 -1.38064,-3.9076 -3.13845,-6.05286 -3.90625,-4.76723 -0.7678,1.28563 -0.14479,5.96296 1.38446,10.39407 1.52925,4.43111 2.82231,11.75708 2.87346,16.27993 0.0512,4.52283 1.04659,8.22334 2.21206,8.22334 1.16548,0 2.11905,1.53845 2.11905,3.41877 0,1.88031 0.95357,2.80887 2.11905,2.06346 1.16547,-0.7454 2.11905,-0.47472 2.11905,0.60156 0,1.07625 1.19196,1.99977 2.64881,2.05226 4.19567,0.15109 22.16572,8.79775 23.73089,11.4185 2.64305,4.42556 6.9896,2.40391 8.19042,-3.80949 z m 48.65355,-14.20657 c 9.79459,-5.25858 20.31755,-16.44341 26.31363,-27.96875 3.27293,-6.29106 7.22943,-13.84746 8.7922,-16.792 1.56276,-2.94456 2.30099,-5.91296 1.64049,-6.59649 -1.48647,-1.53828 -7.66047,3.55935 -7.66047,6.32494 0,2.83363 -15.05717,19.37199 -17.63702,19.37199 -1.1676,0 -6.80725,3.11069 -12.53258,6.91266 -11.42063,7.58399 -23.26102,8.99702 -38.42876,4.58608 -12.23597,-3.55834 -13.653,-6.03594 -7.50895,-13.12896 12.9836,-14.98895 19.13411,-24.68449 15.65894,-24.68449 -2.05029,0 -3.15777,-1.4515 -2.74866,-3.60253 0.67733,-3.56152 1.99135,-4.56067 12.33989,-9.38308 4.80632,-2.23974 4.53631,-2.37085 -2.91164,-1.41393 -4.51507,0.58008 -9.75972,2.47522 -11.65476,4.2114 -1.89502,1.73619 -5.35265,3.64736 -7.6836,4.24709 -4.03111,1.03713 -4.00524,1.16778 0.52976,2.67502 5.39495,1.79308 6.4351,5.45892 1.54892,5.45892 -2.41919,0 -2.87085,1.4353 -1.81787,5.77687 1.35761,5.59769 1.17811,5.72557 -5.78701,4.12358 -3.95345,-0.90931 -11.63099,-1.68631 -17.0612,-1.72669 -8.32277,-0.0618 -10.23604,-0.89774 -12.18451,-5.3232 -1.27129,-2.8874 -2.31143,-6.65261 -2.31143,-8.36715 0,-2.05486 -1.26391,-2.62715 -3.70833,-1.67912 -3.09175,1.19905 -3.2763,0.88725 -1.10994,-1.87532 2.7495,-3.50622 0.0501,-8.46781 -4.61149,-8.47604 -2.57271,-0.004 -12.97573,-16.53745 -14.48578,-23.02144 -0.61632,-2.64644 -1.11889,-1.33615 -1.26722,3.30381 -0.51371,16.07037 8.21595,32.87891 17.07595,32.87891 4.66205,0 5.14134,4.01807 0.69015,5.78567 -1.74822,0.69424 -3.17857,2.24905 -3.17857,3.45515 0,1.20608 1.39805,1.63771 3.10678,0.95914 2.42883,-0.9645 2.84555,0.11797 1.90969,4.96035 -1.34332,6.95065 2.02459,11.14283 18.29305,22.77014 5.24464,3.74842 10.79578,8.09574 12.33589,9.6607 1.54008,1.56495 6.78472,2.83028 11.65476,2.81182 5.7662,-0.0219 7.85179,-0.69114 5.97955,-1.91879 -2.27668,-1.49285 -2.32004,-2.24016 -0.2083,-3.59079 1.54186,-0.98612 3.64847,-0.37648 4.99408,1.44526 3.79778,5.14155 14.14889,4.51802 28.297,-1.70455 7.30523,-3.21296 13.88377,-5.21925 14.61897,-4.45843 2.04872,2.12011 -3.42664,7.90794 -11.83041,12.50551 -4.16225,2.2771 -6.48477,4.18382 -5.16115,4.23711 1.32362,0.0533 4.7931,-1.18436 7.70995,-2.75037 z m -2.09061,-20.35965 c 4.41425,-3.00946 10.308,-6.36965 13.09721,-7.46706 2.78922,-1.09741 8.98176,-7.47312 13.76116,-14.16826 4.77943,-6.69512 9.63154,-12.17295 10.78246,-12.17295 1.15092,0 1.52035,-2.35935 0.82096,-5.243 -0.69937,-2.88363 -0.24074,-5.90229 1.01916,-6.70809 1.29471,-0.82805 2.29075,0.13815 2.29075,2.22217 0,3.02894 0.5675,3.19985 3.17857,0.95736 2.0399,-1.75195 3.17857,-6.60796 3.17857,-13.55528 0,-7.93891 0.70628,-10.45515 2.64881,-9.43689 1.45685,0.76367 1.09926,0.0631 -0.79464,-1.55656 -3.15371,-2.69727 -5.15992,-15.9453 -2.11905,-13.99312 0.72843,0.46762 0.99398,-3.99098 0.59014,-9.90802 -0.40387,-5.91703 -1.59584,-10.75824 -2.64881,-10.75824 -3.19093,0 -2.14111,-6.62635 1.26403,-7.97856 4.37742,-1.73832 4.6055,-27.10772 0.24371,-27.10772 -1.61416,0 -4.49687,-2.46701 -6.40599,-5.48223 -1.90913,-3.01523 -4.59343,-5.48224 -5.96514,-5.48224 -1.8855,0 -1.87359,0.64205 0.0489,2.63147 3.48272,3.6041 3.18938,6.1401 -0.71026,6.1401 -3.92655,0 -12.73588,5.78108 -19.54186,12.82423 -4.95869,5.1315 -10.44251,5.3938 -24.35383,1.16487 -2.85169,-0.86687 -3.70833,0.17324 -3.70833,4.50271 0,4.19709 -1.09559,5.63002 -4.30459,5.63002 -2.36755,0 -4.85349,-1.48021 -5.52434,-3.28934 -1.89833,-5.11934 -5.46729,-3.86739 -3.86531,1.35589 1.03019,3.35896 0.62965,4.37097 -1.44649,3.65482 -1.57915,-0.54474 -2.91114,-1.89499 -2.96001,-3.00056 -0.0487,-1.10558 -1.71759,-5.16825 -3.70833,-9.02816 -4.09,-7.93027 -4.60153,-12.92755 -1.52472,-14.8954 1.17338,-0.75046 1.57197,0.0701 0.90619,1.86555 -1.91814,5.1728 4.9182,16.84206 8.93282,15.24783 2.05181,-0.81479 4.21053,0.0943 5.3862,2.26836 2.92871,5.41567 6.0022,4.38025 5.50361,-1.85413 -0.24115,-3.01522 -1.37475,-5.48223 -2.51912,-5.48223 -1.21782,0 -1.12009,-0.99406 0.23566,-2.39704 1.67574,-1.73414 3.69754,-1.49898 7.31071,0.85031 7.79123,5.06587 19.39594,6.44805 24.12063,2.87286 3.66553,-2.7737 3.02121,-2.96831 -6.24782,-1.88715 -7.60007,0.88649 -9.92818,0.52454 -8.79803,-1.36779 0.84525,-1.4153 3.13365,-2.30042 5.08535,-1.9669 2.002,0.34209 3.54854,-0.8272 3.54854,-2.68296 0,-1.95823 -2.35818,-3.57014 -5.82738,-3.98322 -3.20506,-0.38164 -5.82738,0.35846 -5.82738,1.64467 0,3.73656 -6.69032,2.70151 -9.68922,-1.49901 -2.1951,-3.07468 -3.27363,-3.29265 -5.42527,-1.09645 -2.00837,2.04997 -2.04435,2.74112 -0.14261,2.74112 1.39857,0 2.54285,0.9868 2.54285,2.19289 0,4.36098 -7.68133,2.05145 -14.44762,-4.34396 -5.06584,-4.78818 -6.75105,-8.09974 -6.29963,-12.37912 0.33896,-3.21325 -0.43638,-6.22666 -1.72296,-6.69647 -2.71655,-0.99197 -5.59138,22.00837 -3.69087,29.52921 0.72541,2.87063 0.25973,4.8548 -1.13939,4.8548 -1.30141,0 -2.36619,1.85309 -2.36619,4.11799 0,2.26489 -1.43036,7.66059 -3.17857,11.99048 -3.78689,9.37916 -3.86049,10.20624 -0.90816,10.20624 1.24871,0 3.69369,1.47289 5.43325,3.27307 2.80444,2.90216 3.85595,2.90216 9.27912,0 3.36395,-1.80018 9.0039,-3.27307 12.53322,-3.27307 6.09408,0 6.29418,-0.27882 3.977,-5.54172 -1.84113,-4.18165 -1.84049,-6.16205 0.002,-8.06938 2.90859,-3.00994 9.35742,-0.009 23.35123,10.86999 5.04253,3.91979 10.52557,7.1269 12.18453,7.1269 1.65893,0 3.01625,0.9868 3.01625,2.1929 0,1.20608 1.36611,2.19289 3.03577,2.19289 4.72223,0 6.60219,9.04774 2.52154,12.13558 -1.89104,1.43094 -3.43826,4.22636 -3.43826,6.21204 0,1.98566 -2.38393,5.75534 -5.29762,8.37705 -2.91369,2.62171 -5.29762,6.18403 -5.29762,7.91625 0,2.2475 -1.65621,2.82191 -5.78271,2.00559 -3.84459,-0.76057 -7.84671,0.37693 -11.94099,3.39391 -3.38704,2.49584 -9.57199,5.75237 -13.74431,7.23675 -7.93766,2.82391 -11.56184,7.54514 -5.79191,7.54514 4.48719,0 4.23488,2.88217 -0.65307,7.45985 -2.55156,2.3896 -3.58292,5.43682 -2.83795,8.38488 0.92166,3.6473 0.42268,4.33419 -2.34892,3.23357 -1.93522,-0.76863 -3.51885,-0.39457 -3.51885,0.83127 0,1.22582 -2.44926,4.57777 -5.44278,7.44875 l -5.44277,5.21998 4.54883,2.51931 c 2.50186,1.38562 5.70624,2.05967 7.12083,1.49794 1.41461,-0.56176 4.43919,0.41803 6.72132,2.1773 5.60762,4.32283 18.80415,2.07357 29.12763,-4.96458 z M 259.25002,234.57401 c 0.72031,-1.20608 1.73016,-2.19289 2.24412,-2.19289 0.51395,0 0.93445,0.98681 0.93445,2.19289 0,1.2061 -1.00985,2.19289 -2.24411,2.19289 -1.23426,0 -1.65476,-0.98679 -0.93446,-2.19289 z m -67.82452,85.54793 c 0.74238,-1.24307 -0.1082,-1.61068 -1.99399,-0.86183 -3.67108,1.45781 -4.34275,3.02962 -1.29464,3.02962 1.09669,0 2.57657,-0.97551 3.28863,-2.16779 z m -1.27786,-5.21639 c 1.82385,-2.27418 1.6663,-3.6325 -0.65228,-5.62382 -2.45409,-2.10768 -3.50395,-1.76105 -5.32375,1.75777 -1.24676,2.41078 -2.26683,4.94149 -2.26683,5.62383 0,2.43931 5.883,1.18475 8.24286,-1.75778 z m -12.48095,-21.12343 c 0,-1.20609 -1.00985,-2.1929 -2.24411,-2.1929 -1.23426,0 -1.65477,0.98681 -0.93446,2.1929 0.7203,1.20609 1.73015,2.1929 2.2441,2.1929 0.51396,0 0.93447,-0.98681 0.93447,-2.1929 z m 76.81547,-5.46072 c 13.38268,-2.21745 8.86968,-5.49868 -6.8869,-5.00721 -9.93193,0.30979 -14.83333,1.33797 -14.83333,3.11163 0,2.79688 5.2617,4.66073 10.59523,3.75316 1.74822,-0.29749 6.75447,-1.1334 11.125,-1.85758 z m -76.81547,0.24698 c 0,-0.45535 -1.45219,-2.07513 -3.22708,-3.5995 -2.69829,-2.3174 -3.00837,-2.18175 -1.89234,0.82795 1.13983,3.07384 5.11942,5.22834 5.11942,2.77155 z m 35.64942,-6.48067 c 0.54442,-2.90497 -0.97887,-3.64582 -7.41666,-3.60707 l -8.10181,0.0488 5.29762,4.28509 c 5.99314,4.84769 9.21914,4.61829 10.22085,-0.72677 z m 63.94582,1.57064 c 0,-0.46238 -2.44021,-0.8407 -5.42269,-0.8407 -2.98247,0 -4.88866,0.89416 -4.23597,1.98703 1.08565,1.81787 9.65866,0.80036 9.65866,-1.14633 z m 26.60975,-13.36427 c -0.58452,-1.57631 0.81774,-4.08136 3.11612,-5.56674 5.5272,-3.57209 5.27039,-5.27255 -1.04393,-6.91259 -3.24477,-0.84275 -4.80449,-2.48468 -4.11826,-4.3353 0.64904,-1.75028 -0.67757,-3.46109 -3.21659,-4.14819 -3.83238,-1.03713 -4.04897,-0.64302 -1.91466,3.48396 3.65067,7.05903 4.58778,24.03211 1.26422,22.89751 -1.47662,-0.50411 -3.76627,-3.14198 -5.08813,-5.86198 -3.8847,-7.99353 -6.04984,-9.14184 -6.37753,-3.3824 -0.16761,2.94569 0.59751,4.77877 1.70026,4.07349 1.10273,-0.70528 3.10926,1.74519 4.45895,5.44551 l 2.45396,6.72783 4.91418,-4.77753 c 2.7028,-2.62763 4.43595,-6.06722 3.85141,-7.64357 z m -137.95025,6.09642 c 0.67053,-1.12276 0.23447,-2.67113 -0.96903,-3.44086 -1.2035,-0.76973 -1.62518,-2.34219 -0.93708,-3.49437 2.36189,-3.9548 -1.26283,-14.97547 -4.50235,-13.68903 -2.1091,0.83755 -3.03676,-0.37931 -3.03676,-3.98341 0,-2.85416 -1.90714,-6.42191 -4.2381,-7.92834 -2.33095,-1.50643 -4.23809,-4.7042 -4.23809,-7.10615 0,-2.40197 -1.01783,-4.36722 -2.26185,-4.36722 -2.49551,0 -1.06853,6.30996 3.55499,15.71986 1.58141,3.21851 4.86662,11.35962 7.30047,18.09137 4.26703,11.80209 6.74918,14.51585 9.3278,10.19815 z m 79.55478,-6.7302 c 2.10509,-4.07045 1.61529,-4.38337 -6.81235,-4.35221 -10.80261,0.0399 -17.50037,3.25 -11.63826,5.57788 2.02433,0.80388 5.5735,0.94935 7.88703,0.32326 2.31354,-0.62608 4.20644,-0.24392 4.20644,0.84926 0,3.5986 4.04499,2.07265 6.35714,-2.39819 z m 38.14286,2.19289 c 0,-1.20609 -1.43036,-2.19289 -3.17857,-2.19289 -1.74822,0 -3.17857,-1.04505 -3.17857,-2.32232 0,-1.27728 1.10091,-1.6182 2.44646,-0.75762 1.51575,0.96943 1.87124,0.60155 0.93446,-0.96702 -0.8316,-1.39244 -0.50215,-2.53172 0.73211,-2.53172 1.23426,0 2.00572,-1.2335 1.71435,-2.74112 -0.29137,-1.50761 0.90059,-2.41823 2.64881,-2.0236 1.81041,0.40867 0.49965,-2.18702 -3.04526,-6.03045 -3.42311,-3.71139 -7.41154,-6.74797 -8.86315,-6.74797 -2.72652,0 -6.22074,7.96537 -5.42188,12.35963 0.4272,2.34992 -4.48652,5.72195 -9.15781,6.28449 -5.0553,0.6088 -11.65476,3.73746 -11.65476,5.52528 0,1.06972 6.43661,2.29013 14.30357,2.71207 7.86697,0.42193 15.97232,0.96041 18.01191,1.19663 2.03958,0.23622 3.70833,-0.5573 3.70833,-1.76339 z m -12.30813,-11.12893 c 0.41762,-1.29654 1.66521,-2.35736 2.77242,-2.35736 1.1072,0 2.35479,1.06082 2.77241,2.35736 0.41764,1.29655 -0.82995,2.35736 -2.77241,2.35736 -1.94247,0 -3.19006,-1.06081 -2.77242,-2.35736 z m -12.34508,1.3661 c 4.43546,-0.47717 10.78118,-13.48534 7.5779,-15.53405 -1.09788,-0.70217 -1.99612,0.26177 -1.99612,2.14208 0,2.30596 -1.98879,3.41877 -6.11,3.41877 -3.90805,0 -6.58138,1.38299 -7.41802,3.83756 -0.71942,2.11066 -1.91433,5.22832 -2.65534,6.92811 -1.0172,2.33331 -0.36784,2.66695 2.65017,1.36172 2.19862,-0.95086 5.77673,-1.92025 7.95141,-2.15419 z m -7.01024,-11.2221 c 1.56005,-1.94523 4.56979,-2.9521 6.92185,-2.31558 2.99979,0.81178 3.51773,0.45987 1.85523,-1.26056 -2.55682,-2.64593 -15.25649,1.59197 -15.25649,5.09108 0,3.05419 3.46473,2.24412 6.47941,-1.51494 z m -82.44477,-3.83388 c -1.32145,-1.64774 -1.77519,-3.64518 -1.00832,-4.43879 2.11053,-2.18407 11.04696,-1.72803 15.60495,0.79633 3.30054,1.82795 5.57572,0.80635 12.38758,-5.5622 6.69066,-6.25525 8.2766,-9.19805 8.00209,-14.84836 -0.31092,-6.39964 -0.89952,-6.9792 -6.40782,-6.30949 -3.60216,0.43795 -5.54111,-0.14056 -4.77435,-1.42439 0.75585,-1.26561 -2.87904,-2.52508 -8.76788,-3.03804 -7.89674,-0.68784 -10.65419,-0.0281 -12.82795,3.06907 -3.0567,4.35522 -6.76675,5.24503 -6.76675,1.62294 0,-1.27728 1.10091,-1.6182 2.44646,-0.75763 1.55099,0.99198 1.86975,0.59904 0.87087,-1.07351 -1.10608,-1.85205 -2.36679,-1.95867 -4.23072,-0.35783 -1.46032,1.25418 -3.25314,1.66149 -3.98405,0.90509 -0.73092,-0.75637 -0.40479,1.95938 0.72473,6.03503 1.12951,4.07561 2.05366,12.20963 2.05366,18.07557 0,8.57936 0.62168,10.41845 3.17857,9.40308 1.74822,-0.69423 3.17858,-0.14188 3.17858,1.22732 0,1.36926 0.61267,1.85553 1.36149,1.08061 0.74881,-0.7749 0.2803,-2.75708 -1.04114,-4.4048 z m 186.15584,-2.38705 c 0,-4.28169 -0.89922,-5.10428 -4.76786,-4.36147 -2.62232,0.50352 -3.57589,0.32889 -2.11904,-0.38805 2.8388,-1.39698 3.70498,-7.52804 1.05952,-7.49959 -0.87411,0.009 -2.69208,2.47765 -4.03994,5.48494 -1.34789,3.00729 -1.52209,4.87392 -0.38715,4.14803 1.13496,-0.72587 2.58735,0.75312 3.22758,3.28664 1.61215,6.37971 7.02689,5.86304 7.02689,-0.6705 z m -121.31548,1.57241 c -4.54726,-1.22973 -4.54987,-1.38849 -0.24492,-14.93506 1.91643,-6.03046 3.92855,-12.44467 4.4714,-14.25381 0.54284,-1.80914 1.23975,-10.01952 1.54867,-18.24532 0.59251,-15.77681 2.81369,-20.51021 8.55474,-18.2304 2.64688,1.0511 3.15242,2.97519 2.09311,7.96631 -1.48782,7.01013 0.25196,7.93474 8.47581,4.50447 2.41425,-1.007 5.378,-0.82512 6.88691,0.42264 5.07493,4.19664 2.60549,-0.73116 -3.42191,-6.82845 -5.72128,-5.78762 -5.89531,-6.48758 -3.02333,-12.15996 2.14143,-4.2295 4.10371,-5.60285 6.60048,-4.61953 2.69998,1.06336 2.96391,0.78475 1.09921,-1.16033 -2.49674,-2.60439 -17.88639,-2.02541 -24.17217,0.9094 -2.10779,0.98413 -5.32364,-0.37651 -8.82377,-3.73338 -3.02901,-2.905 -8.75563,-5.91247 -12.72586,-6.68324 -4.45901,-0.86566 -8.93682,-3.80644 -11.7132,-7.69256 l -4.49463,-6.29117 4.64414,-4.09953 c 2.55427,-2.25474 6.84063,-5.37433 9.52525,-6.93243 4.32366,-2.50936 4.80768,-2.38764 4.2381,1.06585 -0.47706,2.89247 1.40367,4.42988 7.28689,5.95658 8.13032,2.10986 13.23812,0.28077 8.2051,-2.93821 -1.78402,-1.14101 -2.02165,-2.3061 -0.64938,-3.18377 1.19036,-0.76132 2.53716,-0.22663 2.99288,1.18819 1.32733,4.12071 9.78725,-6.71168 8.67602,-11.10908 -0.6261,-2.47766 1.01301,-5.22772 4.54211,-7.62066 6.73243,-4.56497 5.25414,-7.93716 -3.47945,-7.93716 -6.08868,0 -6.41707,0.41341 -5.22553,6.57867 0.95298,4.93091 0.48857,6.57869 -1.85417,6.57869 -1.71908,0 -3.12559,1.4802 -3.12559,3.28934 0,5.93407 -3.74633,3.45718 -9.8351,-6.50248 -4.90964,-8.0309 -8.20874,-10.65197 -18.34514,-14.57484 l -12.35899,-4.78301 -5.67126,4.38175 c -3.11919,2.40997 -6.53224,7.48844 -7.58455,11.2855 -1.05231,3.79706 -2.72892,6.90374 -3.72579,6.90374 -0.99688,0 -1.81251,3.51022 -1.81251,7.80051 0,4.29029 -1.08511,12.26003 -2.41135,17.71056 -2.96597,12.18942 -0.76157,15.05094 13.00659,16.88375 6.82807,0.90894 8.33232,0.68085 5.29762,-0.80332 -3.04809,-1.49073 -0.79705,-1.8483 8.0169,-1.2735 7.39876,0.48252 13.76269,2.2112 16.05972,4.36243 2.09258,1.95977 5.42199,3.56321 7.39863,3.56321 1.97667,0 4.61868,2.7137 5.87116,6.03045 3.16287,8.37579 -0.60812,39.429 -6.21133,51.14876 -4.03545,8.4406 -4.12292,9.58956 -1.09423,14.37299 1.81049,2.85947 4.8509,5.08457 6.75643,4.94466 2.94722,-0.21644 2.91081,-0.40415 -0.24371,-1.25725 z m -18.0119,-120.54978 c -3.21699,-1.34332 -3.48397,-6.52628 -0.43657,-8.47531 2.54822,-1.62977 12.62109,4.58365 12.62109,7.78528 0,2.21304 -7.51764,2.63878 -12.18452,0.69003 z m 4.92254,-4.07701 c -2.24587,-1.75831 -4.60219,-2.66007 -5.23625,-2.00391 -1.3301,1.37645 4.05183,5.29075 7.20061,5.23702 1.16548,-0.02 0.28152,-1.47479 -1.96436,-3.23311 z m 151.31009,103.8636 c -0.0612,-3.83152 -8.31997,7.06366 -8.38193,11.05787 -0.0265,1.70943 1.80534,0.59973 4.19097,-2.53878 2.33095,-3.06659 4.21688,-6.90018 4.19096,-8.51909 z M 340.2349,211.03057 c -0.48707,-3.33333 -0.89861,-1.1266 -0.91452,4.90385 -0.0148,6.03046 0.38261,8.75773 0.88559,6.06061 0.50298,-2.69713 0.51601,-7.63113 0.0288,-10.96446 z m -38.96444,-6.24208 c -1.69627,-4.57446 -4.9371,-3.78077 -4.9371,1.20909 0,2.85205 1.0332,3.90668 3.04477,3.10788 1.67462,-0.66502 2.52616,-2.60766 1.89233,-4.31697 z m 12.56212,-2.73916 c 5.69409,-3.88558 5.79371,-6.94738 0.22602,-6.94738 -1.58177,0 -2.23848,1.40346 -1.53917,3.28934 0.89625,2.41695 -0.27857,3.28933 -4.42966,3.28933 -3.22665,0 -5.08775,0.94042 -4.33975,2.1929 1.81605,3.04084 3.3634,2.76087 10.08256,-1.82419 z m -49.28494,-3.78746 c 0,-1.73797 -1.90714,-3.15992 -4.23809,-3.15992 -4.62531,0 -5.86415,5.60959 -1.58929,7.19646 3.58488,1.33074 5.82738,-0.22261 5.82738,-4.03654 z m -70.36668,0.88063 c 9.27289,0.1926 15.27144,-2.36133 15.27144,-6.50195 0,-3.6155 -15.87947,-1.91644 -22.77976,2.43736 -3.7878,2.38994 -6.88691,4.9115 -6.88691,5.60346 0,0.69195 1.0549,0.5834 2.34423,-0.2412 1.28932,-0.82462 6.71227,-1.40857 12.051,-1.29767 z m 142.41882,-24.6846 c -1.37522,-9.75237 -3.25908,-18.71838 -4.18635,-19.92447 -0.92726,-1.2061 -2.33411,-5.33181 -3.12636,-9.16827 -0.79223,-3.83646 -2.80948,-8.1512 -4.48278,-9.5883 -3.71251,-3.18849 -3.71654,-3.43577 0.15914,9.78529 3.98154,13.58215 3.96507,16.6464 -0.0894,16.6464 -5.23012,0 -6.07255,6.24516 -1.40577,10.42138 4.72246,4.22607 8.21641,13.70044 5.05242,13.70044 -1.10167,0 -5.42637,-1.4802 -9.61045,-3.28934 -10.02566,-4.33497 -11.80314,-4.15324 -10.48278,1.07178 0.60613,2.39863 1.94721,3.82058 2.98018,3.15993 1.03298,-0.66066 1.87814,-0.24305 1.87814,0.92801 0,1.17107 2.41516,1.85486 5.36704,1.51953 3.56536,-0.40501 6.66156,1.09338 9.2233,4.46361 2.90117,3.81676 4.45848,4.45008 6.28772,2.55709 1.82925,-1.89299 2.50294,-1.4571 2.72003,1.75995 0.21782,3.22741 0.52498,2.97782 1.25247,-1.01765 0.53014,-2.91159 -0.16126,-13.27301 -1.53652,-23.02538 z m -39.20253,21.43532 c 5.22974,-2.07678 -0.31839,-5.10161 -9.43413,-5.14348 -7.54635,-0.0346 -6.96338,3.01078 0.95357,4.98142 2.33095,0.58021 4.39851,1.16939 4.59454,1.3093 0.19601,0.1399 1.94476,-0.37635 3.88602,-1.14724 z m 7.4123,-16.14152 c 0,-1.20609 -3.09911,-2.12354 -6.88691,-2.03877 -5.77129,0.12916 -6.20037,0.45943 -2.64881,2.03877 5.8543,2.60334 9.53572,2.60334 9.53572,0 z M 172.56747,148.70861 c 0.32898,-21.70022 0.2571,-22.06564 -2.69816,-13.71689 -6.01236,16.98524 -7.03596,21.89085 -7.03596,33.72012 l 0,12.01448 4.69807,-4.86179 c 4.1804,-4.32607 4.73531,-7.31836 5.03605,-27.15592 z m 116.46481,25.28082 c 3.65706,-2.47969 7.6775,-3.16812 13.1695,-2.25504 5.378,0.89413 6.88918,0.65087 4.72681,-0.76089 -3.03259,-1.97993 -31.30581,-1.22097 -33.35075,0.89525 -0.53812,0.55686 -0.34984,2.06493 0.41838,3.35127 2.04554,3.42508 9.01055,2.85505 15.03606,-1.23059 z m -71.67759,-6.52707 c -0.70416,-0.72868 -2.53184,-0.80659 -4.06151,-0.17313 -1.69044,0.70003 -1.18832,1.21965 1.28026,1.32487 2.23382,0.0952 3.48539,-0.42307 2.78125,-1.15175 z m 44.41037,-2.56984 c 6.29363,0.5401 10.46432,0.3561 9.2682,-0.40891 -1.19612,-0.765 6.15261,-1.4679 16.33053,-1.56199 10.7573,-0.0994 19.78461,0.86313 21.56086,2.29905 2.33939,1.89115 2.68259,1.82764 1.46422,-0.271 -1.9061,-3.2833 1.15889,-3.6625 4.19635,-0.51919 1.45013,1.50066 3.56288,0.61084 6.5084,-2.74111 4.14734,-4.71958 4.20799,-5.51833 1.23589,-16.28231 -1.71899,-6.22558 -5.99296,-14.6134 -9.49772,-18.63958 -3.50477,-4.02619 -5.19643,-5.59343 -3.75925,-3.48277 1.90589,2.79897 1.95137,3.83756 0.16804,3.83756 -1.34477,0 -2.94043,-1.33604 -3.54595,-2.96896 -0.60552,-1.63294 -3.6747,-2.88762 -6.82041,-2.78819 -3.1457,0.0994 -8.20652,-0.52181 -11.24629,-1.38054 -5.02552,-1.4197 -5.43557,-1.06735 -4.52082,3.88463 1.10298,5.97091 -3.03278,7.67451 -5.09966,2.10064 -0.79589,-2.14634 -2.10112,-2.63615 -3.64182,-1.36663 -3.43552,2.83084 -15.32779,1.59093 -19.554,-2.03873 -3.21124,-2.75798 -3.44222,-2.60234 -2.19122,1.47656 0.98769,3.22037 -0.21843,6.36489 -4.10656,10.70648 -3.3538,3.74491 -4.64002,6.70017 -3.29148,7.56266 3.05276,1.95244 0.43744,11.12679 -3.17187,11.12679 -1.61228,0 -2.93143,-1.9736 -2.93143,-4.38578 0,-2.99273 -1.41271,-4.38578 -4.44761,-4.38578 -2.44618,0 -7.81833,-1.65526 -11.9381,-3.67835 -7.08624,-3.47983 -7.64056,-3.46593 -10.27152,0.25752 -4.08536,5.78176 1.65035,13.85702 11.15267,15.7018 4.06598,0.78936 9.80587,3.7496 12.75531,6.5783 4.37623,4.1971 6.15257,4.70558 9.65745,2.76446 2.36217,-1.30825 9.44417,-1.93673 15.73779,-1.39663 z m -17.64158,-16.93777 c 0.67084,-1.80913 0.29607,-3.28933 -0.83281,-3.28933 -1.1289,0 -2.05255,1.4802 -2.05255,3.28933 0,1.80914 0.37477,3.28934 0.8328,3.28934 0.45806,0 1.38169,-1.4802 2.05256,-3.28934 z m -88.31877,-5.8934 c -0.67645,-1.74935 -1.17857,-1.22972 -1.28026,1.32487 -0.092,2.31168 0.40883,3.60686 1.11297,2.87818 0.70414,-0.72869 0.77942,-2.62006 0.1673,-4.20305 z m -2.09811,-12.15623 c -0.53728,-2.13361 -1.0122,-0.91889 -1.05538,2.69938 -0.0432,3.61827 0.3964,5.36396 0.97686,3.8793 0.58045,-1.48466 0.61579,-4.44507 0.0785,-6.57868 z m 108.72199,-9.36152 c 0,-1.2061 -1.48664,-2.1929 -3.30363,-2.1929 -1.817,0 -2.71429,0.9868 -1.99399,2.1929 0.72031,1.20608 2.20695,2.19289 3.30364,2.19289 1.09669,0 1.99398,-0.98681 1.99398,-2.19289 z m 12.71429,-2.00839 c 0,-0.84653 -1.43269,-3.45466 -3.18376,-5.79584 -3.10979,-4.15775 -3.15048,-4.15865 -1.75116,-0.0384 1.13449,3.34052 0.68443,3.92117 -2.16289,2.79047 -3.00954,-1.19512 -3.23689,-0.7344 -1.39508,2.82697 2.01165,3.88984 8.49289,4.0553 8.49289,0.21681 z m -36.81239,-5.72681 c -0.82077,-2.21344 1.07872,-4.81372 5.60066,-7.66693 5.97182,-3.76803 6.24928,-4.31856 2.18012,-4.32571 -2.56441,-0.005 -5.5183,1.57421 -6.56422,3.50827 -2.05013,3.79107 -5.52781,2.52004 -17.12133,-6.257587 -2.78778,-2.110664 -8.03918,-3.789479 -11.66981,-3.730708 -5.78579,0.09366 -5.00271,0.783982 6.34002,5.588939 8.12602,3.442306 13.97555,7.482196 15.72118,10.857606 3.01589,5.83163 7.54118,7.49463 5.51338,2.02612 z m 41.31344,-1.62115 c -2.09282,-2.14962 -2.33621,-1.89774 -1.18625,1.22757 0.79577,2.16268 1.98066,3.37973 2.63309,2.70457 0.65243,-0.67516 10e-4,-2.44463 -1.44684,-3.93214 z m 16.68943,2.92544 c 0,-1.12482 -1.92098,-2.67607 -4.26887,-3.44722 -2.34788,-0.77115 -3.72196,-2.31786 -3.0535,-3.43711 0.66843,-1.11926 0.27361,-2.03502 -0.87739,-2.03502 -1.15103,0 -3.59124,-1.55068 -5.42269,-3.44597 -1.83147,-1.895291 -3.32994,-2.433543 -3.32994,-1.19613 0,3.79659 10.22888,13.40937 16.42262,15.43345 0.29137,0.0952 0.52977,-0.74719 0.52977,-1.872 z m 2.73533,-8.9284 c 0.70471,-2.78874 2.26551,-3.93619 4.27089,-3.13984 4.87886,1.93744 6.36177,-2.913432 1.68282,-5.504797 -4.67769,-2.590668 -12.87122,-0.599789 -8.64793,2.101298 1.90201,1.216478 1.92716,2.746489 0.10319,6.273509 -1.32688,2.56557 -1.53656,4.66467 -0.46602,4.66467 1.07057,0 2.44623,-1.97768 3.05705,-4.39484 z m -33.61645,-2.29291 c -2.24574,-0.84426 -4.90015,-1.04175 -5.89869,-0.43887 -2.8833,1.74085 3.20377,4.66554 6.76604,3.25093 2.62747,-1.04339 2.4688,-1.55786 -0.86735,-2.81206 z m 80.04461,-1.5716 c -1.39944,-0.48274 -2.54445,-2.275673 -2.54445,-3.984308 0,-1.708625 -1.00985,-3.10659 -2.24411,-3.10659 -1.23426,0 -1.64016,-1.011257 -0.90201,-2.247236 0.73814,-1.235969 0.20597,-1.97607 -1.18273,-1.644669 -1.38865,0.331412 -2.81835,-1.214764 -3.17709,-3.435938 -0.9399,-5.819648 -2.27662,-6.559019 -6.6387,-3.672058 -3.01619,1.996203 -3.09675,2.314988 -0.36611,1.448545 4.86248,-1.542873 6.50787,0.820397 3.36736,4.836519 -1.76743,2.260228 -1.82077,2.861524 -0.16253,1.832775 1.48573,-0.921753 4.29847,1.534208 7.06789,6.1714 2.67284,4.47545 5.59026,7.06915 6.96353,6.19085 1.69821,-1.08614 1.64727,-1.75863 -0.18096,-2.38929 z m -19.49683,-2.705114 c -1.74821,-1.169154 -4.13214,-2.125739 -5.29762,-2.125739 -1.16547,0 -0.68869,0.956585 1.05953,2.125739 1.74821,1.169153 4.13214,2.125724 5.29762,2.125724 1.16547,0 0.68869,-0.956571 -1.05953,-2.125724 z M 312.048,88.436474 c 1.11604,-3.009685 0.80596,-3.145352 -1.89233,-0.827938 -3.67706,3.158047 -4.05976,4.427444 -1.33474,4.427444 1.04079,0 2.49297,-1.619777 3.22707,-3.599506 z m 7.59488,1.406614 c 0,-1.206088 -0.89729,-2.192889 -1.99398,-2.192889 -1.09669,0 -2.58333,0.986801 -3.30364,2.192889 -0.72031,1.206097 0.17694,2.192892 1.99398,2.192892 1.817,0 3.30364,-0.986795 3.30364,-2.192892 z m -1.18427,-11.991166 c -2.26234,-1.770778 -5.01079,-3.250981 -6.10765,-3.289339 -1.09686,-0.03836 -0.14325,1.379077 2.11905,3.149858 2.26234,1.770778 5.01078,3.250981 6.10765,3.289339 1.09686,0.03836 0.14324,-1.379077 -2.11905,-3.149858 z M 305.06822,62.048183 c -2.49802,-4.44547 -3.10125,-3.022588 -1.05641,2.491867 0.72671,1.959795 1.76769,3.101318 2.31328,2.536717 0.54559,-0.564602 -0.0191,-2.827466 -1.25687,-5.028584 z m 17.34512,448.664227 c 0.57817,-1.90047 1.73279,-10.04158 2.56581,-18.09136 1.95029,-18.84604 -1.36988,-19.26831 -7.31504,-0.93036 -2.44383,7.53806 -5.33044,15.15721 -6.41469,16.93141 -3.91753,6.41053 -4.64051,0.13092 -1.33829,-11.62408 4.71685,-16.79085 4.43858,-17.94753 -5.10158,-21.2058 l -8.47619,-2.89488 0,-14.87492 c 0,-12.73299 0.65576,-15.35023 4.55402,-18.17583 6.56922,-4.76159 13.86722,-0.22912 26.53713,16.48108 l 10.23028,13.49258 1.33197,-22.78051 c 0.73257,-12.52927 2.98703,-32.64727 5.00991,-44.70667 2.1246,-12.66582 3.19415,-26.77712 2.53243,-33.41201 -0.63003,-6.31721 -0.28372,-12.03703 0.76962,-12.7107 1.05331,-0.67369 4.55898,2.82459 7.79036,7.77395 5.00142,7.66044 10.5589,11.42581 37.36678,25.31709 17.32037,8.97504 34.04405,16.31825 37.16373,16.31825 6.02062,0 53.76149,16.56487 70.6721,24.52143 l 10.06548,4.73586 0,39.01073 0,39.01073 -90.63961,0.025 -90.63964,0.025 0.80267,-8.71015 c 0.49745,-5.39776 -0.0878,-8.70999 -1.53893,-8.70999 -1.2879,0 -2.35624,2.7137 -2.37408,6.03045 -0.017,3.31675 -1.06137,7.51066 -2.31896,9.31979 -1.99854,2.8751 -2.15409,2.85419 -1.23528,-0.166 z m 81.55382,-9.70192 c 1.28234,-8.32771 5.2692,-16.62108 8.9776,-18.67492 4.95289,-2.74307 24.63113,3.29082 27.25053,8.35578 1.07722,2.08291 1.45922,6.49035 0.84891,9.79425 l -1.10966,6.00712 32.03273,0 32.03276,0 0,-32.67092 0,-32.6709 -16.42262,-6.07316 c -9.03244,-3.34024 -23.1549,-8.78308 -31.38323,-12.09524 -8.22832,-3.31215 -20.17969,-7.02053 -26.55859,-8.24083 -6.37891,-1.2203 -25.39306,-9.12877 -42.25369,-17.57441 l -30.65569,-15.35568 -3.75399,19.03094 c -2.06472,10.46701 -4.35217,31.19563 -5.08324,46.0636 -1.25352,25.49294 -2.65228,30.93801 -8.6377,33.6243 -0.91177,0.40922 -1.31591,6.44334 -0.8981,13.40917 l 0.75964,12.66514 32.0895,-0.60423 c 30.22063,-0.56904 32.12883,-0.85965 32.76484,-4.99001 z m 18.44953,0.6035 c 1.41271,-1.46194 0.53421,-1.69745 -2.63548,-0.70658 -3.75614,1.17421 -4.48723,0.76548 -3.48162,-1.94643 0.7001,-1.88799 0.32848,-3.43272 -0.82581,-3.43272 -1.15431,0 -2.55898,2.49156 -3.12153,5.53679 -0.8869,4.80124 -0.42707,5.35116 3.4613,4.13932 2.46625,-0.76861 5.43767,-2.38429 6.60314,-3.59038 z m 9.53572,2.92045 c 0,-1.07706 -1.43036,-2.52628 -3.17857,-3.22053 -1.9362,-0.76887 -3.17858,-0.004 -3.17858,1.95828 0,1.77129 1.43036,3.22053 3.17858,3.22053 1.74821,0 3.17857,-0.88124 3.17857,-1.95828 z M 318.53068,473.0511 c -1.54506,-5.45383 -13.26634,-16.84321 -17.42947,-16.93593 -1.45684,-0.0325 -2.62759,1.66792 -2.60168,3.77857 0.0773,6.30363 7.27492,14.09702 13.35632,14.46202 3.11574,0.18706 5.66567,1.08012 5.66648,1.98468 8.2e-4,0.90457 0.54254,1.64467 1.20383,1.64467 0.66127,0 0.57331,-2.2203 -0.19538,-4.93401 z m 15.54565,-123.37054 c 0.47748,-4.2325 1.71636,-8.23793 2.75307,-8.901 2.13386,-1.36474 2.55427,7.85395 0.59867,13.12775 -2.28393,6.15922 -4.2445,3.68682 -3.35174,-4.22675 z"],
  };

  bunker(function () {
    defineIcons('fas', icons);
  });

}());
(function () {
  'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var noop = function noop() {};

  var _WINDOW = {};
  var _DOCUMENT = {};
  var _MUTATION_OBSERVER = null;
  var _PERFORMANCE = {
    mark: noop,
    measure: noop
  };

  try {
    if (typeof window !== 'undefined') _WINDOW = window;
    if (typeof document !== 'undefined') _DOCUMENT = document;
    if (typeof MutationObserver !== 'undefined') _MUTATION_OBSERVER = MutationObserver;
    if (typeof performance !== 'undefined') _PERFORMANCE = performance;
  } catch (e) {}

  var _ref = _WINDOW.navigator || {},
      _ref$userAgent = _ref.userAgent,
      userAgent = _ref$userAgent === void 0 ? '' : _ref$userAgent;

  var WINDOW = _WINDOW;
  var DOCUMENT = _DOCUMENT;
  var MUTATION_OBSERVER = _MUTATION_OBSERVER;
  var PERFORMANCE = _PERFORMANCE;
  var IS_BROWSER = !!WINDOW.document;
  var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === 'function' && typeof DOCUMENT.createElement === 'function';
  var IS_IE = ~userAgent.indexOf('MSIE') || ~userAgent.indexOf('Trident/');

  var NAMESPACE_IDENTIFIER = '___FONT_AWESOME___';
  var UNITS_IN_GRID = 16;
  var DEFAULT_FAMILY_PREFIX = 'fa';
  var DEFAULT_REPLACEMENT_CLASS = 'svg-inline--fa';
  var DATA_FA_I2SVG = 'data-fa-i2svg';
  var DATA_FA_PSEUDO_ELEMENT = 'data-fa-pseudo-element';
  var DATA_FA_PSEUDO_ELEMENT_PENDING = 'data-fa-pseudo-element-pending';
  var DATA_PREFIX = 'data-prefix';
  var DATA_ICON = 'data-icon';
  var HTML_CLASS_I2SVG_BASE_CLASS = 'fontawesome-i2svg';
  var MUTATION_APPROACH_ASYNC = 'async';
  var TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = ['HTML', 'HEAD', 'STYLE', 'SCRIPT'];
  var PRODUCTION = function () {
    try {
      return "production" === 'production';
    } catch (e) {
      return false;
    }
  }();
  var PREFIX_TO_STYLE = {
    'fas': 'solid',
    'far': 'regular',
    'fal': 'light',
    'fad': 'duotone',
    'fab': 'brands',
    'fak': 'kit',
    'fa': 'solid'
  };
  var STYLE_TO_PREFIX = {
    'solid': 'fas',
    'regular': 'far',
    'light': 'fal',
    'duotone': 'fad',
    'brands': 'fab',
    'kit': 'fak'
  };
  var LAYERS_TEXT_CLASSNAME = 'fa-layers-text';
  var FONT_FAMILY_PATTERN = /Font Awesome ([5 ]*)(Solid|Regular|Light|Duotone|Brands|Free|Pro|Kit).*/; // TODO: do we need to handle font-weight for kit SVG pseudo-elements?

  var FONT_WEIGHT_TO_PREFIX = {
    '900': 'fas',
    '400': 'far',
    'normal': 'far',
    '300': 'fal'
  };
  var oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var oneToTwenty = oneToTen.concat([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
  var ATTRIBUTES_WATCHED_FOR_MUTATION = ['class', 'data-prefix', 'data-icon', 'data-fa-transform', 'data-fa-mask'];
  var DUOTONE_CLASSES = {
    GROUP: 'group',
    SWAP_OPACITY: 'swap-opacity',
    PRIMARY: 'primary',
    SECONDARY: 'secondary'
  };
  var RESERVED_CLASSES = ['xs', 'sm', 'lg', 'fw', 'ul', 'li', 'border', 'pull-left', 'pull-right', 'spin', 'pulse', 'rotate-90', 'rotate-180', 'rotate-270', 'flip-horizontal', 'flip-vertical', 'flip-both', 'stack', 'stack-1x', 'stack-2x', 'inverse', 'layers', 'layers-text', 'layers-counter', DUOTONE_CLASSES.GROUP, DUOTONE_CLASSES.SWAP_OPACITY, DUOTONE_CLASSES.PRIMARY, DUOTONE_CLASSES.SECONDARY].concat(oneToTen.map(function (n) {
    return "".concat(n, "x");
  })).concat(oneToTwenty.map(function (n) {
    return "w-".concat(n);
  }));

  var initial = WINDOW.FontAwesomeConfig || {};

  function getAttrConfig(attr) {
    var element = DOCUMENT.querySelector('script[' + attr + ']');

    if (element) {
      return element.getAttribute(attr);
    }
  }

  function coerce(val) {
    // Getting an empty string will occur if the attribute is set on the HTML tag but without a value
    // We'll assume that this is an indication that it should be toggled to true
    // For example <script data-search-pseudo-elements src="..."></script>
    if (val === '') return true;
    if (val === 'false') return false;
    if (val === 'true') return true;
    return val;
  }

  if (DOCUMENT && typeof DOCUMENT.querySelector === 'function') {
    var attrs = [['data-family-prefix', 'familyPrefix'], ['data-replacement-class', 'replacementClass'], ['data-auto-replace-svg', 'autoReplaceSvg'], ['data-auto-add-css', 'autoAddCss'], ['data-auto-a11y', 'autoA11y'], ['data-search-pseudo-elements', 'searchPseudoElements'], ['data-observe-mutations', 'observeMutations'], ['data-mutate-approach', 'mutateApproach'], ['data-keep-original-source', 'keepOriginalSource'], ['data-measure-performance', 'measurePerformance'], ['data-show-missing-icons', 'showMissingIcons']];
    attrs.forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          attr = _ref2[0],
          key = _ref2[1];

      var val = coerce(getAttrConfig(attr));

      if (val !== undefined && val !== null) {
        initial[key] = val;
      }
    });
  }

  var _default = {
    familyPrefix: DEFAULT_FAMILY_PREFIX,
    replacementClass: DEFAULT_REPLACEMENT_CLASS,
    autoReplaceSvg: true,
    autoAddCss: true,
    autoA11y: true,
    searchPseudoElements: false,
    observeMutations: true,
    mutateApproach: 'async',
    keepOriginalSource: true,
    measurePerformance: false,
    showMissingIcons: true
  };

  var _config = _objectSpread({}, _default, initial);

  if (!_config.autoReplaceSvg) _config.observeMutations = false;

  var config = _objectSpread({}, _config);

  WINDOW.FontAwesomeConfig = config;

  var w = WINDOW || {};
  if (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};
  if (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};
  if (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};
  if (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];
  var namespace = w[NAMESPACE_IDENTIFIER];

  var functions = [];

  var listener = function listener() {
    DOCUMENT.removeEventListener('DOMContentLoaded', listener);
    loaded = 1;
    functions.map(function (fn) {
      return fn();
    });
  };

  var loaded = false;

  if (IS_DOM) {
    loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);
    if (!loaded) DOCUMENT.addEventListener('DOMContentLoaded', listener);
  }

  function domready (fn) {
    if (!IS_DOM) return;
    loaded ? setTimeout(fn, 0) : functions.push(fn);
  }

  var PENDING = 'pending';
  var SETTLED = 'settled';
  var FULFILLED = 'fulfilled';
  var REJECTED = 'rejected';

  var NOOP = function NOOP() {};

  var isNode = typeof global !== 'undefined' && typeof global.process !== 'undefined' && typeof global.process.emit === 'function';
  var asyncSetTimer = typeof setImmediate === 'undefined' ? setTimeout : setImmediate;
  var asyncQueue = [];
  var asyncTimer;

  function asyncFlush() {
    // run promise callbacks
    for (var i = 0; i < asyncQueue.length; i++) {
      asyncQueue[i][0](asyncQueue[i][1]);
    } // reset async asyncQueue


    asyncQueue = [];
    asyncTimer = false;
  }

  function asyncCall(callback, arg) {
    asyncQueue.push([callback, arg]);

    if (!asyncTimer) {
      asyncTimer = true;
      asyncSetTimer(asyncFlush, 0);
    }
  }

  function invokeResolver(resolver, promise) {
    function resolvePromise(value) {
      resolve(promise, value);
    }

    function rejectPromise(reason) {
      reject(promise, reason);
    }

    try {
      resolver(resolvePromise, rejectPromise);
    } catch (e) {
      rejectPromise(e);
    }
  }

  function invokeCallback(subscriber) {
    var owner = subscriber.owner;
    var settled = owner._state;
    var value = owner._data;
    var callback = subscriber[settled];
    var promise = subscriber.then;

    if (typeof callback === 'function') {
      settled = FULFILLED;

      try {
        value = callback(value);
      } catch (e) {
        reject(promise, e);
      }
    }

    if (!handleThenable(promise, value)) {
      if (settled === FULFILLED) {
        resolve(promise, value);
      }

      if (settled === REJECTED) {
        reject(promise, value);
      }
    }
  }

  function handleThenable(promise, value) {
    var resolved;

    try {
      if (promise === value) {
        throw new TypeError('A promises callback cannot return that same promise.');
      }

      if (value && (typeof value === 'function' || _typeof(value) === 'object')) {
        // then should be retrieved only once
        var then = value.then;

        if (typeof then === 'function') {
          then.call(value, function (val) {
            if (!resolved) {
              resolved = true;

              if (value === val) {
                fulfill(promise, val);
              } else {
                resolve(promise, val);
              }
            }
          }, function (reason) {
            if (!resolved) {
              resolved = true;
              reject(promise, reason);
            }
          });
          return true;
        }
      }
    } catch (e) {
      if (!resolved) {
        reject(promise, e);
      }

      return true;
    }

    return false;
  }

  function resolve(promise, value) {
    if (promise === value || !handleThenable(promise, value)) {
      fulfill(promise, value);
    }
  }

  function fulfill(promise, value) {
    if (promise._state === PENDING) {
      promise._state = SETTLED;
      promise._data = value;
      asyncCall(publishFulfillment, promise);
    }
  }

  function reject(promise, reason) {
    if (promise._state === PENDING) {
      promise._state = SETTLED;
      promise._data = reason;
      asyncCall(publishRejection, promise);
    }
  }

  function publish(promise) {
    promise._then = promise._then.forEach(invokeCallback);
  }

  function publishFulfillment(promise) {
    promise._state = FULFILLED;
    publish(promise);
  }

  function publishRejection(promise) {
    promise._state = REJECTED;
    publish(promise);

    if (!promise._handled && isNode) {
      global.process.emit('unhandledRejection', promise._data, promise);
    }
  }

  function notifyRejectionHandled(promise) {
    global.process.emit('rejectionHandled', promise);
  }
  /**
   * @class
   */


  function P(resolver) {
    if (typeof resolver !== 'function') {
      throw new TypeError('Promise resolver ' + resolver + ' is not a function');
    }

    if (this instanceof P === false) {
      throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
    }

    this._then = [];
    invokeResolver(resolver, this);
  }

  P.prototype = {
    constructor: P,
    _state: PENDING,
    _then: null,
    _data: undefined,
    _handled: false,
    then: function then(onFulfillment, onRejection) {
      var subscriber = {
        owner: this,
        then: new this.constructor(NOOP),
        fulfilled: onFulfillment,
        rejected: onRejection
      };

      if ((onRejection || onFulfillment) && !this._handled) {
        this._handled = true;

        if (this._state === REJECTED && isNode) {
          asyncCall(notifyRejectionHandled, this);
        }
      }

      if (this._state === FULFILLED || this._state === REJECTED) {
        // already resolved, call callback async
        asyncCall(invokeCallback, subscriber);
      } else {
        // subscribe
        this._then.push(subscriber);
      }

      return subscriber.then;
    },
    catch: function _catch(onRejection) {
      return this.then(null, onRejection);
    }
  };

  P.all = function (promises) {
    if (!Array.isArray(promises)) {
      throw new TypeError('You must pass an array to Promise.all().');
    }

    return new P(function (resolve, reject) {
      var results = [];
      var remaining = 0;

      function resolver(index) {
        remaining++;
        return function (value) {
          results[index] = value;

          if (! --remaining) {
            resolve(results);
          }
        };
      }

      for (var i = 0, promise; i < promises.length; i++) {
        promise = promises[i];

        if (promise && typeof promise.then === 'function') {
          promise.then(resolver(i), reject);
        } else {
          results[i] = promise;
        }
      }

      if (!remaining) {
        resolve(results);
      }
    });
  };

  P.race = function (promises) {
    if (!Array.isArray(promises)) {
      throw new TypeError('You must pass an array to Promise.race().');
    }

    return new P(function (resolve, reject) {
      for (var i = 0, promise; i < promises.length; i++) {
        promise = promises[i];

        if (promise && typeof promise.then === 'function') {
          promise.then(resolve, reject);
        } else {
          resolve(promise);
        }
      }
    });
  };

  P.resolve = function (value) {
    if (value && _typeof(value) === 'object' && value.constructor === P) {
      return value;
    }

    return new P(function (resolve) {
      resolve(value);
    });
  };

  P.reject = function (reason) {
    return new P(function (resolve, reject) {
      reject(reason);
    });
  };

  var picked = typeof Promise === 'function' ? Promise : P;

  var d = UNITS_IN_GRID;
  var meaninglessTransform = {
    size: 16,
    x: 0,
    y: 0,
    rotate: 0,
    flipX: false,
    flipY: false
  };

  function isReserved(name) {
    return ~RESERVED_CLASSES.indexOf(name);
  }

  function bunker(fn) {
    try {
      fn();
    } catch (e) {
      if (!PRODUCTION) {
        throw e;
      }
    }
  }
  function insertCss(css) {
    if (!css || !IS_DOM) {
      return;
    }

    var style = DOCUMENT.createElement('style');
    style.setAttribute('type', 'text/css');
    style.innerHTML = css;
    var headChildren = DOCUMENT.head.childNodes;
    var beforeChild = null;

    for (var i = headChildren.length - 1; i > -1; i--) {
      var child = headChildren[i];
      var tagName = (child.tagName || '').toUpperCase();

      if (['STYLE', 'LINK'].indexOf(tagName) > -1) {
        beforeChild = child;
      }
    }

    DOCUMENT.head.insertBefore(style, beforeChild);
    return css;
  }
  var idPool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  function nextUniqueId() {
    var size = 12;
    var id = '';

    while (size-- > 0) {
      id += idPool[Math.random() * 62 | 0];
    }

    return id;
  }
  function toArray(obj) {
    var array = [];

    for (var i = (obj || []).length >>> 0; i--;) {
      array[i] = obj[i];
    }

    return array;
  }
  function classArray(node) {
    if (node.classList) {
      return toArray(node.classList);
    } else {
      return (node.getAttribute('class') || '').split(' ').filter(function (i) {
        return i;
      });
    }
  }
  function getIconName(familyPrefix, cls) {
    var parts = cls.split('-');
    var prefix = parts[0];
    var iconName = parts.slice(1).join('-');

    if (prefix === familyPrefix && iconName !== '' && !isReserved(iconName)) {
      return iconName;
    } else {
      return null;
    }
  }
  function htmlEscape(str) {
    return "".concat(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
  function joinAttributes(attributes) {
    return Object.keys(attributes || {}).reduce(function (acc, attributeName) {
      return acc + "".concat(attributeName, "=\"").concat(htmlEscape(attributes[attributeName]), "\" ");
    }, '').trim();
  }
  function joinStyles(styles) {
    return Object.keys(styles || {}).reduce(function (acc, styleName) {
      return acc + "".concat(styleName, ": ").concat(styles[styleName], ";");
    }, '');
  }
  function transformIsMeaningful(transform) {
    return transform.size !== meaninglessTransform.size || transform.x !== meaninglessTransform.x || transform.y !== meaninglessTransform.y || transform.rotate !== meaninglessTransform.rotate || transform.flipX || transform.flipY;
  }
  function transformForSvg(_ref) {
    var transform = _ref.transform,
        containerWidth = _ref.containerWidth,
        iconWidth = _ref.iconWidth;
    var outer = {
      transform: "translate(".concat(containerWidth / 2, " 256)")
    };
    var innerTranslate = "translate(".concat(transform.x * 32, ", ").concat(transform.y * 32, ") ");
    var innerScale = "scale(".concat(transform.size / 16 * (transform.flipX ? -1 : 1), ", ").concat(transform.size / 16 * (transform.flipY ? -1 : 1), ") ");
    var innerRotate = "rotate(".concat(transform.rotate, " 0 0)");
    var inner = {
      transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
    };
    var path = {
      transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
    };
    return {
      outer: outer,
      inner: inner,
      path: path
    };
  }
  function transformForCss(_ref2) {
    var transform = _ref2.transform,
        _ref2$width = _ref2.width,
        width = _ref2$width === void 0 ? UNITS_IN_GRID : _ref2$width,
        _ref2$height = _ref2.height,
        height = _ref2$height === void 0 ? UNITS_IN_GRID : _ref2$height,
        _ref2$startCentered = _ref2.startCentered,
        startCentered = _ref2$startCentered === void 0 ? false : _ref2$startCentered;
    var val = '';

    if (startCentered && IS_IE) {
      val += "translate(".concat(transform.x / d - width / 2, "em, ").concat(transform.y / d - height / 2, "em) ");
    } else if (startCentered) {
      val += "translate(calc(-50% + ".concat(transform.x / d, "em), calc(-50% + ").concat(transform.y / d, "em)) ");
    } else {
      val += "translate(".concat(transform.x / d, "em, ").concat(transform.y / d, "em) ");
    }

    val += "scale(".concat(transform.size / d * (transform.flipX ? -1 : 1), ", ").concat(transform.size / d * (transform.flipY ? -1 : 1), ") ");
    val += "rotate(".concat(transform.rotate, "deg) ");
    return val;
  }

  var ALL_SPACE = {
    x: 0,
    y: 0,
    width: '100%',
    height: '100%'
  };

  function fillBlack(abstract) {
    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (abstract.attributes && (abstract.attributes.fill || force)) {
      abstract.attributes.fill = 'black';
    }

    return abstract;
  }

  function deGroup(abstract) {
    if (abstract.tag === 'g') {
      return abstract.children;
    } else {
      return [abstract];
    }
  }

  function makeIconMasking (_ref) {
    var children = _ref.children,
        attributes = _ref.attributes,
        main = _ref.main,
        mask = _ref.mask,
        explicitMaskId = _ref.maskId,
        transform = _ref.transform;
    var mainWidth = main.width,
        mainPath = main.icon;
    var maskWidth = mask.width,
        maskPath = mask.icon;
    var trans = transformForSvg({
      transform: transform,
      containerWidth: maskWidth,
      iconWidth: mainWidth
    });
    var maskRect = {
      tag: 'rect',
      attributes: _objectSpread({}, ALL_SPACE, {
        fill: 'white'
      })
    };
    var maskInnerGroupChildrenMixin = mainPath.children ? {
      children: mainPath.children.map(fillBlack)
    } : {};
    var maskInnerGroup = {
      tag: 'g',
      attributes: _objectSpread({}, trans.inner),
      children: [fillBlack(_objectSpread({
        tag: mainPath.tag,
        attributes: _objectSpread({}, mainPath.attributes, trans.path)
      }, maskInnerGroupChildrenMixin))]
    };
    var maskOuterGroup = {
      tag: 'g',
      attributes: _objectSpread({}, trans.outer),
      children: [maskInnerGroup]
    };
    var maskId = "mask-".concat(explicitMaskId || nextUniqueId());
    var clipId = "clip-".concat(explicitMaskId || nextUniqueId());
    var maskTag = {
      tag: 'mask',
      attributes: _objectSpread({}, ALL_SPACE, {
        id: maskId,
        maskUnits: 'userSpaceOnUse',
        maskContentUnits: 'userSpaceOnUse'
      }),
      children: [maskRect, maskOuterGroup]
    };
    var defs = {
      tag: 'defs',
      children: [{
        tag: 'clipPath',
        attributes: {
          id: clipId
        },
        children: deGroup(maskPath)
      }, maskTag]
    };
    children.push(defs, {
      tag: 'rect',
      attributes: _objectSpread({
        fill: 'currentColor',
        'clip-path': "url(#".concat(clipId, ")"),
        mask: "url(#".concat(maskId, ")")
      }, ALL_SPACE)
    });
    return {
      children: children,
      attributes: attributes
    };
  }

  function makeIconStandard (_ref) {
    var children = _ref.children,
        attributes = _ref.attributes,
        main = _ref.main,
        transform = _ref.transform,
        styles = _ref.styles;
    var styleString = joinStyles(styles);

    if (styleString.length > 0) {
      attributes['style'] = styleString;
    }

    if (transformIsMeaningful(transform)) {
      var trans = transformForSvg({
        transform: transform,
        containerWidth: main.width,
        iconWidth: main.width
      });
      children.push({
        tag: 'g',
        attributes: _objectSpread({}, trans.outer),
        children: [{
          tag: 'g',
          attributes: _objectSpread({}, trans.inner),
          children: [{
            tag: main.icon.tag,
            children: main.icon.children,
            attributes: _objectSpread({}, main.icon.attributes, trans.path)
          }]
        }]
      });
    } else {
      children.push(main.icon);
    }

    return {
      children: children,
      attributes: attributes
    };
  }

  function asIcon (_ref) {
    var children = _ref.children,
        main = _ref.main,
        mask = _ref.mask,
        attributes = _ref.attributes,
        styles = _ref.styles,
        transform = _ref.transform;

    if (transformIsMeaningful(transform) && main.found && !mask.found) {
      var width = main.width,
          height = main.height;
      var offset = {
        x: width / height / 2,
        y: 0.5
      };
      attributes['style'] = joinStyles(_objectSpread({}, styles, {
        'transform-origin': "".concat(offset.x + transform.x / 16, "em ").concat(offset.y + transform.y / 16, "em")
      }));
    }

    return [{
      tag: 'svg',
      attributes: attributes,
      children: children
    }];
  }

  function asSymbol (_ref) {
    var prefix = _ref.prefix,
        iconName = _ref.iconName,
        children = _ref.children,
        attributes = _ref.attributes,
        symbol = _ref.symbol;
    var id = symbol === true ? "".concat(prefix, "-").concat(config.familyPrefix, "-").concat(iconName) : symbol;
    return [{
      tag: 'svg',
      attributes: {
        style: 'display: none;'
      },
      children: [{
        tag: 'symbol',
        attributes: _objectSpread({}, attributes, {
          id: id
        }),
        children: children
      }]
    }];
  }

  function makeInlineSvgAbstract(params) {
    var _params$icons = params.icons,
        main = _params$icons.main,
        mask = _params$icons.mask,
        prefix = params.prefix,
        iconName = params.iconName,
        transform = params.transform,
        symbol = params.symbol,
        title = params.title,
        maskId = params.maskId,
        titleId = params.titleId,
        extra = params.extra,
        _params$watchable = params.watchable,
        watchable = _params$watchable === void 0 ? false : _params$watchable;

    var _ref = mask.found ? mask : main,
        width = _ref.width,
        height = _ref.height;

    var isUploadedIcon = prefix === 'fak';
    var widthClass = isUploadedIcon ? '' : "fa-w-".concat(Math.ceil(width / height * 16));
    var attrClass = [config.replacementClass, iconName ? "".concat(config.familyPrefix, "-").concat(iconName) : '', widthClass].filter(function (c) {
      return extra.classes.indexOf(c) === -1;
    }).filter(function (c) {
      return c !== '' || !!c;
    }).concat(extra.classes).join(' ');
    var content = {
      children: [],
      attributes: _objectSpread({}, extra.attributes, {
        'data-prefix': prefix,
        'data-icon': iconName,
        'class': attrClass,
        'role': extra.attributes.role || 'img',
        'xmlns': 'http://www.w3.org/2000/svg',
        'viewBox': "0 0 ".concat(width, " ").concat(height)
      })
    };
    var uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf('fa-fw') ? {
      width: "".concat(width / height * 16 * 0.0625, "em")
    } : {};

    if (watchable) {
      content.attributes[DATA_FA_I2SVG] = '';
    }

    if (title) content.children.push({
      tag: 'title',
      attributes: {
        id: content.attributes['aria-labelledby'] || "title-".concat(titleId || nextUniqueId())
      },
      children: [title]
    });

    var args = _objectSpread({}, content, {
      prefix: prefix,
      iconName: iconName,
      main: main,
      mask: mask,
      maskId: maskId,
      transform: transform,
      symbol: symbol,
      styles: _objectSpread({}, uploadedIconWidthStyle, extra.styles)
    });

    var _ref2 = mask.found && main.found ? makeIconMasking(args) : makeIconStandard(args),
        children = _ref2.children,
        attributes = _ref2.attributes;

    args.children = children;
    args.attributes = attributes;

    if (symbol) {
      return asSymbol(args);
    } else {
      return asIcon(args);
    }
  }
  function makeLayersTextAbstract(params) {
    var content = params.content,
        width = params.width,
        height = params.height,
        transform = params.transform,
        title = params.title,
        extra = params.extra,
        _params$watchable2 = params.watchable,
        watchable = _params$watchable2 === void 0 ? false : _params$watchable2;

    var attributes = _objectSpread({}, extra.attributes, title ? {
      'title': title
    } : {}, {
      'class': extra.classes.join(' ')
    });

    if (watchable) {
      attributes[DATA_FA_I2SVG] = '';
    }

    var styles = _objectSpread({}, extra.styles);

    if (transformIsMeaningful(transform)) {
      styles['transform'] = transformForCss({
        transform: transform,
        startCentered: true,
        width: width,
        height: height
      });
      styles['-webkit-transform'] = styles['transform'];
    }

    var styleString = joinStyles(styles);

    if (styleString.length > 0) {
      attributes['style'] = styleString;
    }

    var val = [];
    val.push({
      tag: 'span',
      attributes: attributes,
      children: [content]
    });

    if (title) {
      val.push({
        tag: 'span',
        attributes: {
          class: 'sr-only'
        },
        children: [title]
      });
    }

    return val;
  }
  function makeLayersCounterAbstract(params) {
    var content = params.content,
        title = params.title,
        extra = params.extra;

    var attributes = _objectSpread({}, extra.attributes, title ? {
      'title': title
    } : {}, {
      'class': extra.classes.join(' ')
    });

    var styleString = joinStyles(extra.styles);

    if (styleString.length > 0) {
      attributes['style'] = styleString;
    }

    var val = [];
    val.push({
      tag: 'span',
      attributes: attributes,
      children: [content]
    });

    if (title) {
      val.push({
        tag: 'span',
        attributes: {
          class: 'sr-only'
        },
        children: [title]
      });
    }

    return val;
  }

  var noop$1 = function noop() {};

  var p = config.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {
    mark: noop$1,
    measure: noop$1
  };
  var preamble = "FA \"5.15.3\"";

  var begin = function begin(name) {
    p.mark("".concat(preamble, " ").concat(name, " begins"));
    return function () {
      return end(name);
    };
  };

  var end = function end(name) {
    p.mark("".concat(preamble, " ").concat(name, " ends"));
    p.measure("".concat(preamble, " ").concat(name), "".concat(preamble, " ").concat(name, " begins"), "".concat(preamble, " ").concat(name, " ends"));
  };

  var perf = {
    begin: begin,
    end: end
  };

  /**
   * Internal helper to bind a function known to have 4 arguments
   * to a given context.
   */

  var bindInternal4 = function bindInternal4(func, thisContext) {
    return function (a, b, c, d) {
      return func.call(thisContext, a, b, c, d);
    };
  };

  /**
   * # Reduce
   *
   * A fast object `.reduce()` implementation.
   *
   * @param  {Object}   subject      The object to reduce over.
   * @param  {Function} fn           The reducer function.
   * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].
   * @param  {Object}   thisContext  The context for the reducer.
   * @return {mixed}                 The final result.
   */


  var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {
    var keys = Object.keys(subject),
        length = keys.length,
        iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn,
        i,
        key,
        result;

    if (initialValue === undefined) {
      i = 1;
      result = subject[keys[0]];
    } else {
      i = 0;
      result = initialValue;
    }

    for (; i < length; i++) {
      key = keys[i];
      result = iterator(result, subject[key], key, subject);
    }

    return result;
  };

  function toHex(unicode) {
    var result = '';

    for (var i = 0; i < unicode.length; i++) {
      var hex = unicode.charCodeAt(i).toString(16);
      result += ('000' + hex).slice(-4);
    }

    return result;
  }

  function defineIcons(prefix, icons) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _params$skipHooks = params.skipHooks,
        skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
    var normalized = Object.keys(icons).reduce(function (acc, iconName) {
      var icon = icons[iconName];
      var expanded = !!icon.icon;

      if (expanded) {
        acc[icon.iconName] = icon.icon;
      } else {
        acc[iconName] = icon;
      }

      return acc;
    }, {});

    if (typeof namespace.hooks.addPack === 'function' && !skipHooks) {
      namespace.hooks.addPack(prefix, normalized);
    } else {
      namespace.styles[prefix] = _objectSpread({}, namespace.styles[prefix] || {}, normalized);
    }
    /**
     * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
     * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
     * for `fas` so we'll easy the upgrade process for our users by automatically defining
     * this as well.
     */


    if (prefix === 'fas') {
      defineIcons('fa', icons);
    }
  }

  var styles = namespace.styles,
      shims = namespace.shims;
  var _byUnicode = {};
  var _byLigature = {};
  var _byOldName = {};
  var build = function build() {
    var lookup = function lookup(reducer) {
      return reduce(styles, function (o, style, prefix) {
        o[prefix] = reduce(style, reducer, {});
        return o;
      }, {});
    };

    _byUnicode = lookup(function (acc, icon, iconName) {
      if (icon[3]) {
        acc[icon[3]] = iconName;
      }

      return acc;
    });
    _byLigature = lookup(function (acc, icon, iconName) {
      var ligatures = icon[2];
      acc[iconName] = iconName;
      ligatures.forEach(function (ligature) {
        acc[ligature] = iconName;
      });
      return acc;
    });
    var hasRegular = 'far' in styles;
    _byOldName = reduce(shims, function (acc, shim) {
      var oldName = shim[0];
      var prefix = shim[1];
      var iconName = shim[2];

      if (prefix === 'far' && !hasRegular) {
        prefix = 'fas';
      }

      acc[oldName] = {
        prefix: prefix,
        iconName: iconName
      };
      return acc;
    }, {});
  };
  build();
  function byUnicode(prefix, unicode) {
    return (_byUnicode[prefix] || {})[unicode];
  }
  function byLigature(prefix, ligature) {
    return (_byLigature[prefix] || {})[ligature];
  }
  function byOldName(name) {
    return _byOldName[name] || {
      prefix: null,
      iconName: null
    };
  }

  var styles$1 = namespace.styles;
  var emptyCanonicalIcon = function emptyCanonicalIcon() {
    return {
      prefix: null,
      iconName: null,
      rest: []
    };
  };
  function getCanonicalIcon(values) {
    return values.reduce(function (acc, cls) {
      var iconName = getIconName(config.familyPrefix, cls);

      if (styles$1[cls]) {
        acc.prefix = cls;
      } else if (config.autoFetchSvg && Object.keys(PREFIX_TO_STYLE).indexOf(cls) > -1) {
        acc.prefix = cls;
      } else if (iconName) {
        var shim = acc.prefix === 'fa' ? byOldName(iconName) : {};
        acc.iconName = shim.iconName || iconName;
        acc.prefix = shim.prefix || acc.prefix;
      } else if (cls !== config.replacementClass && cls.indexOf('fa-w-') !== 0) {
        acc.rest.push(cls);
      }

      return acc;
    }, emptyCanonicalIcon());
  }
  function iconFromMapping(mapping, prefix, iconName) {
    if (mapping && mapping[prefix] && mapping[prefix][iconName]) {
      return {
        prefix: prefix,
        iconName: iconName,
        icon: mapping[prefix][iconName]
      };
    }
  }

  function toHtml(abstractNodes) {
    var tag = abstractNodes.tag,
        _abstractNodes$attrib = abstractNodes.attributes,
        attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib,
        _abstractNodes$childr = abstractNodes.children,
        children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;

    if (typeof abstractNodes === 'string') {
      return htmlEscape(abstractNodes);
    } else {
      return "<".concat(tag, " ").concat(joinAttributes(attributes), ">").concat(children.map(toHtml).join(''), "</").concat(tag, ">");
    }
  }

  var noop$2 = function noop() {};

  function isWatched(node) {
    var i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;
    return typeof i2svg === 'string';
  }

  function getMutator() {
    if (config.autoReplaceSvg === true) {
      return mutators.replace;
    }

    var mutator = mutators[config.autoReplaceSvg];
    return mutator || mutators.replace;
  }

  var mutators = {
    replace: function replace(mutation) {
      var node = mutation[0];
      var abstract = mutation[1];
      var newOuterHTML = abstract.map(function (a) {
        return toHtml(a);
      }).join('\n');

      if (node.parentNode && node.outerHTML) {
        node.outerHTML = newOuterHTML + (config.keepOriginalSource && node.tagName.toLowerCase() !== 'svg' ? "<!-- ".concat(node.outerHTML, " Font Awesome fontawesome.com -->") : '');
      } else if (node.parentNode) {
        var newNode = document.createElement('span');
        node.parentNode.replaceChild(newNode, node);
        newNode.outerHTML = newOuterHTML;
      }
    },
    nest: function nest(mutation) {
      var node = mutation[0];
      var abstract = mutation[1]; // If we already have a replaced node we do not want to continue nesting within it.
      // Short-circuit to the standard replacement

      if (~classArray(node).indexOf(config.replacementClass)) {
        return mutators.replace(mutation);
      }

      var forSvg = new RegExp("".concat(config.familyPrefix, "-.*"));
      delete abstract[0].attributes.style;
      delete abstract[0].attributes.id;
      var splitClasses = abstract[0].attributes.class.split(' ').reduce(function (acc, cls) {
        if (cls === config.replacementClass || cls.match(forSvg)) {
          acc.toSvg.push(cls);
        } else {
          acc.toNode.push(cls);
        }

        return acc;
      }, {
        toNode: [],
        toSvg: []
      });
      abstract[0].attributes.class = splitClasses.toSvg.join(' ');
      var newInnerHTML = abstract.map(function (a) {
        return toHtml(a);
      }).join('\n');
      node.setAttribute('class', splitClasses.toNode.join(' '));
      node.setAttribute(DATA_FA_I2SVG, '');
      node.innerHTML = newInnerHTML;
    }
  };

  function performOperationSync(op) {
    op();
  }

  function perform(mutations, callback) {
    var callbackFunction = typeof callback === 'function' ? callback : noop$2;

    if (mutations.length === 0) {
      callbackFunction();
    } else {
      var frame = performOperationSync;

      if (config.mutateApproach === MUTATION_APPROACH_ASYNC) {
        frame = WINDOW.requestAnimationFrame || performOperationSync;
      }

      frame(function () {
        var mutator = getMutator();
        var mark = perf.begin('mutate');
        mutations.map(mutator);
        mark();
        callbackFunction();
      });
    }
  }
  var disabled = false;
  function disableObservation() {
    disabled = true;
  }
  function enableObservation() {
    disabled = false;
  }
  var mo = null;
  function observe(options) {
    if (!MUTATION_OBSERVER) {
      return;
    }

    if (!config.observeMutations) {
      return;
    }

    var treeCallback = options.treeCallback,
        nodeCallback = options.nodeCallback,
        pseudoElementsCallback = options.pseudoElementsCallback,
        _options$observeMutat = options.observeMutationsRoot,
        observeMutationsRoot = _options$observeMutat === void 0 ? DOCUMENT : _options$observeMutat;
    mo = new MUTATION_OBSERVER(function (objects) {
      if (disabled) return;
      toArray(objects).forEach(function (mutationRecord) {
        if (mutationRecord.type === 'childList' && mutationRecord.addedNodes.length > 0 && !isWatched(mutationRecord.addedNodes[0])) {
          if (config.searchPseudoElements) {
            pseudoElementsCallback(mutationRecord.target);
          }

          treeCallback(mutationRecord.target);
        }

        if (mutationRecord.type === 'attributes' && mutationRecord.target.parentNode && config.searchPseudoElements) {
          pseudoElementsCallback(mutationRecord.target.parentNode);
        }

        if (mutationRecord.type === 'attributes' && isWatched(mutationRecord.target) && ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)) {
          if (mutationRecord.attributeName === 'class') {
            var _getCanonicalIcon = getCanonicalIcon(classArray(mutationRecord.target)),
                prefix = _getCanonicalIcon.prefix,
                iconName = _getCanonicalIcon.iconName;

            if (prefix) mutationRecord.target.setAttribute('data-prefix', prefix);
            if (iconName) mutationRecord.target.setAttribute('data-icon', iconName);
          } else {
            nodeCallback(mutationRecord.target);
          }
        }
      });
    });
    if (!IS_DOM) return;
    mo.observe(observeMutationsRoot, {
      childList: true,
      attributes: true,
      characterData: true,
      subtree: true
    });
  }
  function disconnect() {
    if (!mo) return;
    mo.disconnect();
  }

  function styleParser (node) {
    var style = node.getAttribute('style');
    var val = [];

    if (style) {
      val = style.split(';').reduce(function (acc, style) {
        var styles = style.split(':');
        var prop = styles[0];
        var value = styles.slice(1);

        if (prop && value.length > 0) {
          acc[prop] = value.join(':').trim();
        }

        return acc;
      }, {});
    }

    return val;
  }

  function classParser (node) {
    var existingPrefix = node.getAttribute('data-prefix');
    var existingIconName = node.getAttribute('data-icon');
    var innerText = node.innerText !== undefined ? node.innerText.trim() : '';
    var val = getCanonicalIcon(classArray(node));

    if (existingPrefix && existingIconName) {
      val.prefix = existingPrefix;
      val.iconName = existingIconName;
    }

    if (val.prefix && innerText.length > 1) {
      val.iconName = byLigature(val.prefix, node.innerText);
    } else if (val.prefix && innerText.length === 1) {
      val.iconName = byUnicode(val.prefix, toHex(node.innerText));
    }

    return val;
  }

  var parseTransformString = function parseTransformString(transformString) {
    var transform = {
      size: 16,
      x: 0,
      y: 0,
      flipX: false,
      flipY: false,
      rotate: 0
    };

    if (!transformString) {
      return transform;
    } else {
      return transformString.toLowerCase().split(' ').reduce(function (acc, n) {
        var parts = n.toLowerCase().split('-');
        var first = parts[0];
        var rest = parts.slice(1).join('-');

        if (first && rest === 'h') {
          acc.flipX = true;
          return acc;
        }

        if (first && rest === 'v') {
          acc.flipY = true;
          return acc;
        }

        rest = parseFloat(rest);

        if (isNaN(rest)) {
          return acc;
        }

        switch (first) {
          case 'grow':
            acc.size = acc.size + rest;
            break;

          case 'shrink':
            acc.size = acc.size - rest;
            break;

          case 'left':
            acc.x = acc.x - rest;
            break;

          case 'right':
            acc.x = acc.x + rest;
            break;

          case 'up':
            acc.y = acc.y - rest;
            break;

          case 'down':
            acc.y = acc.y + rest;
            break;

          case 'rotate':
            acc.rotate = acc.rotate + rest;
            break;
        }

        return acc;
      }, transform);
    }
  };
  function transformParser (node) {
    return parseTransformString(node.getAttribute('data-fa-transform'));
  }

  function symbolParser (node) {
    var symbol = node.getAttribute('data-fa-symbol');
    return symbol === null ? false : symbol === '' ? true : symbol;
  }

  function attributesParser (node) {
    var extraAttributes = toArray(node.attributes).reduce(function (acc, attr) {
      if (acc.name !== 'class' && acc.name !== 'style') {
        acc[attr.name] = attr.value;
      }

      return acc;
    }, {});
    var title = node.getAttribute('title');
    var titleId = node.getAttribute('data-fa-title-id');

    if (config.autoA11y) {
      if (title) {
        extraAttributes['aria-labelledby'] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
      } else {
        extraAttributes['aria-hidden'] = 'true';
        extraAttributes['focusable'] = 'false';
      }
    }

    return extraAttributes;
  }

  function maskParser (node) {
    var mask = node.getAttribute('data-fa-mask');

    if (!mask) {
      return emptyCanonicalIcon();
    } else {
      return getCanonicalIcon(mask.split(' ').map(function (i) {
        return i.trim();
      }));
    }
  }

  function blankMeta() {
    return {
      iconName: null,
      title: null,
      titleId: null,
      prefix: null,
      transform: meaninglessTransform,
      symbol: false,
      mask: null,
      maskId: null,
      extra: {
        classes: [],
        styles: {},
        attributes: {}
      }
    };
  }
  function parseMeta(node) {
    var _classParser = classParser(node),
        iconName = _classParser.iconName,
        prefix = _classParser.prefix,
        extraClasses = _classParser.rest;

    var extraStyles = styleParser(node);
    var transform = transformParser(node);
    var symbol = symbolParser(node);
    var extraAttributes = attributesParser(node);
    var mask = maskParser(node);
    return {
      iconName: iconName,
      title: node.getAttribute('title'),
      titleId: node.getAttribute('data-fa-title-id'),
      prefix: prefix,
      transform: transform,
      symbol: symbol,
      mask: mask,
      maskId: node.getAttribute('data-fa-mask-id'),
      extra: {
        classes: extraClasses,
        styles: extraStyles,
        attributes: extraAttributes
      }
    };
  }

  function MissingIcon(error) {
    this.name = 'MissingIcon';
    this.message = error || 'Icon unavailable';
    this.stack = new Error().stack;
  }
  MissingIcon.prototype = Object.create(Error.prototype);
  MissingIcon.prototype.constructor = MissingIcon;

  var FILL = {
    fill: 'currentColor'
  };
  var ANIMATION_BASE = {
    attributeType: 'XML',
    repeatCount: 'indefinite',
    dur: '2s'
  };
  var RING = {
    tag: 'path',
    attributes: _objectSpread({}, FILL, {
      d: 'M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z'
    })
  };

  var OPACITY_ANIMATE = _objectSpread({}, ANIMATION_BASE, {
    attributeName: 'opacity'
  });

  var DOT = {
    tag: 'circle',
    attributes: _objectSpread({}, FILL, {
      cx: '256',
      cy: '364',
      r: '28'
    }),
    children: [{
      tag: 'animate',
      attributes: _objectSpread({}, ANIMATION_BASE, {
        attributeName: 'r',
        values: '28;14;28;28;14;28;'
      })
    }, {
      tag: 'animate',
      attributes: _objectSpread({}, OPACITY_ANIMATE, {
        values: '1;0;1;1;0;1;'
      })
    }]
  };
  var QUESTION = {
    tag: 'path',
    attributes: _objectSpread({}, FILL, {
      opacity: '1',
      d: 'M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z'
    }),
    children: [{
      tag: 'animate',
      attributes: _objectSpread({}, OPACITY_ANIMATE, {
        values: '1;0;0;0;0;1;'
      })
    }]
  };
  var EXCLAMATION = {
    tag: 'path',
    attributes: _objectSpread({}, FILL, {
      opacity: '0',
      d: 'M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z'
    }),
    children: [{
      tag: 'animate',
      attributes: _objectSpread({}, OPACITY_ANIMATE, {
        values: '0;0;1;1;0;0;'
      })
    }]
  };
  var missing = {
    tag: 'g',
    children: [RING, DOT, QUESTION, EXCLAMATION]
  };

  var styles$2 = namespace.styles;
  function asFoundIcon(icon) {
    var width = icon[0];
    var height = icon[1];

    var _icon$slice = icon.slice(4),
        _icon$slice2 = _slicedToArray(_icon$slice, 1),
        vectorData = _icon$slice2[0];

    var element = null;

    if (Array.isArray(vectorData)) {
      element = {
        tag: 'g',
        attributes: {
          class: "".concat(config.familyPrefix, "-").concat(DUOTONE_CLASSES.GROUP)
        },
        children: [{
          tag: 'path',
          attributes: {
            class: "".concat(config.familyPrefix, "-").concat(DUOTONE_CLASSES.SECONDARY),
            fill: 'currentColor',
            d: vectorData[0]
          }
        }, {
          tag: 'path',
          attributes: {
            class: "".concat(config.familyPrefix, "-").concat(DUOTONE_CLASSES.PRIMARY),
            fill: 'currentColor',
            d: vectorData[1]
          }
        }]
      };
    } else {
      element = {
        tag: 'path',
        attributes: {
          fill: 'currentColor',
          d: vectorData
        }
      };
    }

    return {
      found: true,
      width: width,
      height: height,
      icon: element
    };
  }
  function findIcon(iconName, prefix) {
    return new picked(function (resolve, reject) {
      var val = {
        found: false,
        width: 512,
        height: 512,
        icon: missing
      };

      if (iconName && prefix && styles$2[prefix] && styles$2[prefix][iconName]) {
        var icon = styles$2[prefix][iconName];
        return resolve(asFoundIcon(icon));
      }

      if (iconName && prefix && !config.showMissingIcons) {
        reject(new MissingIcon("Icon is missing for prefix ".concat(prefix, " with icon name ").concat(iconName)));
      } else {
        resolve(val);
      }
    });
  }

  var styles$3 = namespace.styles;

  function generateSvgReplacementMutation(node, nodeMeta) {
    var iconName = nodeMeta.iconName,
        title = nodeMeta.title,
        titleId = nodeMeta.titleId,
        prefix = nodeMeta.prefix,
        transform = nodeMeta.transform,
        symbol = nodeMeta.symbol,
        mask = nodeMeta.mask,
        maskId = nodeMeta.maskId,
        extra = nodeMeta.extra;
    return new picked(function (resolve, reject) {
      picked.all([findIcon(iconName, prefix), findIcon(mask.iconName, mask.prefix)]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            main = _ref2[0],
            mask = _ref2[1];

        resolve([node, makeInlineSvgAbstract({
          icons: {
            main: main,
            mask: mask
          },
          prefix: prefix,
          iconName: iconName,
          transform: transform,
          symbol: symbol,
          mask: mask,
          maskId: maskId,
          title: title,
          titleId: titleId,
          extra: extra,
          watchable: true
        })]);
      });
    });
  }

  function generateLayersText(node, nodeMeta) {
    var title = nodeMeta.title,
        transform = nodeMeta.transform,
        extra = nodeMeta.extra;
    var width = null;
    var height = null;

    if (IS_IE) {
      var computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);
      var boundingClientRect = node.getBoundingClientRect();
      width = boundingClientRect.width / computedFontSize;
      height = boundingClientRect.height / computedFontSize;
    }

    if (config.autoA11y && !title) {
      extra.attributes['aria-hidden'] = 'true';
    }

    return picked.resolve([node, makeLayersTextAbstract({
      content: node.innerHTML,
      width: width,
      height: height,
      transform: transform,
      title: title,
      extra: extra,
      watchable: true
    })]);
  }

  function generateMutation(node) {
    var nodeMeta = parseMeta(node);

    if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {
      return generateLayersText(node, nodeMeta);
    } else {
      return generateSvgReplacementMutation(node, nodeMeta);
    }
  }

  function onTree(root) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (!IS_DOM) return;
    var htmlClassList = DOCUMENT.documentElement.classList;

    var hclAdd = function hclAdd(suffix) {
      return htmlClassList.add("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
    };

    var hclRemove = function hclRemove(suffix) {
      return htmlClassList.remove("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
    };

    var prefixes = config.autoFetchSvg ? Object.keys(PREFIX_TO_STYLE) : Object.keys(styles$3);
    var prefixesDomQuery = [".".concat(LAYERS_TEXT_CLASSNAME, ":not([").concat(DATA_FA_I2SVG, "])")].concat(prefixes.map(function (p) {
      return ".".concat(p, ":not([").concat(DATA_FA_I2SVG, "])");
    })).join(', ');

    if (prefixesDomQuery.length === 0) {
      return;
    }

    var candidates = [];

    try {
      candidates = toArray(root.querySelectorAll(prefixesDomQuery));
    } catch (e) {// noop
    }

    if (candidates.length > 0) {
      hclAdd('pending');
      hclRemove('complete');
    } else {
      return;
    }

    var mark = perf.begin('onTree');
    var mutations = candidates.reduce(function (acc, node) {
      try {
        var mutation = generateMutation(node);

        if (mutation) {
          acc.push(mutation);
        }
      } catch (e) {
        if (!PRODUCTION) {
          if (e instanceof MissingIcon) {
            console.error(e);
          }
        }
      }

      return acc;
    }, []);
    return new picked(function (resolve, reject) {
      picked.all(mutations).then(function (resolvedMutations) {
        perform(resolvedMutations, function () {
          hclAdd('active');
          hclAdd('complete');
          hclRemove('pending');
          if (typeof callback === 'function') callback();
          mark();
          resolve();
        });
      }).catch(function () {
        mark();
        reject();
      });
    });
  }
  function onNode(node) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    generateMutation(node).then(function (mutation) {
      if (mutation) {
        perform([mutation], callback);
      }
    });
  }

  function replaceForPosition(node, position) {
    var pendingAttribute = "".concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(position.replace(':', '-'));
    return new picked(function (resolve, reject) {
      if (node.getAttribute(pendingAttribute) !== null) {
        // This node is already being processed
        return resolve();
      }

      var children = toArray(node.children);
      var alreadyProcessedPseudoElement = children.filter(function (c) {
        return c.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position;
      })[0];
      var styles = WINDOW.getComputedStyle(node, position);
      var fontFamily = styles.getPropertyValue('font-family').match(FONT_FAMILY_PATTERN);
      var fontWeight = styles.getPropertyValue('font-weight');
      var content = styles.getPropertyValue('content');

      if (alreadyProcessedPseudoElement && !fontFamily) {
        // If we've already processed it but the current computed style does not result in a font-family,
        // that probably means that a class name that was previously present to make the icon has been
        // removed. So we now should delete the icon.
        node.removeChild(alreadyProcessedPseudoElement);
        return resolve();
      } else if (fontFamily && content !== 'none' && content !== '') {
        var _content = styles.getPropertyValue('content');

        var prefix = ~['Solid', 'Regular', 'Light', 'Duotone', 'Brands', 'Kit'].indexOf(fontFamily[2]) ? STYLE_TO_PREFIX[fontFamily[2].toLowerCase()] : FONT_WEIGHT_TO_PREFIX[fontWeight];
        var hexValue = toHex(_content.length === 3 ? _content.substr(1, 1) : _content);
        var iconName = byUnicode(prefix, hexValue);
        var iconIdentifier = iconName; // Only convert the pseudo element in this :before/:after position into an icon if we haven't
        // already done so with the same prefix and iconName

        if (iconName && (!alreadyProcessedPseudoElement || alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !== prefix || alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !== iconIdentifier)) {
          node.setAttribute(pendingAttribute, iconIdentifier);

          if (alreadyProcessedPseudoElement) {
            // Delete the old one, since we're replacing it with a new one
            node.removeChild(alreadyProcessedPseudoElement);
          }

          var meta = blankMeta();
          var extra = meta.extra;
          extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;
          findIcon(iconName, prefix).then(function (main) {
            var abstract = makeInlineSvgAbstract(_objectSpread({}, meta, {
              icons: {
                main: main,
                mask: emptyCanonicalIcon()
              },
              prefix: prefix,
              iconName: iconIdentifier,
              extra: extra,
              watchable: true
            }));
            var element = DOCUMENT.createElement('svg');

            if (position === ':before') {
              node.insertBefore(element, node.firstChild);
            } else {
              node.appendChild(element);
            }

            element.outerHTML = abstract.map(function (a) {
              return toHtml(a);
            }).join('\n');
            node.removeAttribute(pendingAttribute);
            resolve();
          }).catch(reject);
        } else {
          resolve();
        }
      } else {
        resolve();
      }
    });
  }

  function replace(node) {
    return picked.all([replaceForPosition(node, ':before'), replaceForPosition(node, ':after')]);
  }

  function processable(node) {
    return node.parentNode !== document.head && !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(node.tagName.toUpperCase()) && !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) && (!node.parentNode || node.parentNode.tagName !== 'svg');
  }

  function searchPseudoElements (root) {
    if (!IS_DOM) return;
    return new picked(function (resolve, reject) {
      var operations = toArray(root.querySelectorAll('*')).filter(processable).map(replace);
      var end = perf.begin('searchPseudoElements');
      disableObservation();
      picked.all(operations).then(function () {
        end();
        enableObservation();
        resolve();
      }).catch(function () {
        end();
        enableObservation();
        reject();
      });
    });
  }

  var baseStyles = "svg:not(:root).svg-inline--fa{overflow:visible}.svg-inline--fa{display:inline-block;font-size:inherit;height:1em;overflow:visible;vertical-align:-.125em}.svg-inline--fa.fa-lg{vertical-align:-.225em}.svg-inline--fa.fa-w-1{width:.0625em}.svg-inline--fa.fa-w-2{width:.125em}.svg-inline--fa.fa-w-3{width:.1875em}.svg-inline--fa.fa-w-4{width:.25em}.svg-inline--fa.fa-w-5{width:.3125em}.svg-inline--fa.fa-w-6{width:.375em}.svg-inline--fa.fa-w-7{width:.4375em}.svg-inline--fa.fa-w-8{width:.5em}.svg-inline--fa.fa-w-9{width:.5625em}.svg-inline--fa.fa-w-10{width:.625em}.svg-inline--fa.fa-w-11{width:.6875em}.svg-inline--fa.fa-w-12{width:.75em}.svg-inline--fa.fa-w-13{width:.8125em}.svg-inline--fa.fa-w-14{width:.875em}.svg-inline--fa.fa-w-15{width:.9375em}.svg-inline--fa.fa-w-16{width:1em}.svg-inline--fa.fa-w-17{width:1.0625em}.svg-inline--fa.fa-w-18{width:1.125em}.svg-inline--fa.fa-w-19{width:1.1875em}.svg-inline--fa.fa-w-20{width:1.25em}.svg-inline--fa.fa-pull-left{margin-right:.3em;width:auto}.svg-inline--fa.fa-pull-right{margin-left:.3em;width:auto}.svg-inline--fa.fa-border{height:1.5em}.svg-inline--fa.fa-li{width:2em}.svg-inline--fa.fa-fw{width:1.25em}.fa-layers svg.svg-inline--fa{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.fa-layers{display:inline-block;height:1em;position:relative;text-align:center;vertical-align:-.125em;width:1em}.fa-layers svg.svg-inline--fa{-webkit-transform-origin:center center;transform-origin:center center}.fa-layers-counter,.fa-layers-text{display:inline-block;position:absolute;text-align:center}.fa-layers-text{left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);-webkit-transform-origin:center center;transform-origin:center center}.fa-layers-counter{background-color:#ff253a;border-radius:1em;-webkit-box-sizing:border-box;box-sizing:border-box;color:#fff;height:1.5em;line-height:1;max-width:5em;min-width:1.5em;overflow:hidden;padding:.25em;right:0;text-overflow:ellipsis;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top right;transform-origin:top right}.fa-layers-bottom-right{bottom:0;right:0;top:auto;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:bottom right;transform-origin:bottom right}.fa-layers-bottom-left{bottom:0;left:0;right:auto;top:auto;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:bottom left;transform-origin:bottom left}.fa-layers-top-right{right:0;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top right;transform-origin:top right}.fa-layers-top-left{left:0;right:auto;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top left;transform-origin:top left}.fa-lg{font-size:1.3333333333em;line-height:.75em;vertical-align:-.0667em}.fa-xs{font-size:.75em}.fa-sm{font-size:.875em}.fa-1x{font-size:1em}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-6x{font-size:6em}.fa-7x{font-size:7em}.fa-8x{font-size:8em}.fa-9x{font-size:9em}.fa-10x{font-size:10em}.fa-fw{text-align:center;width:1.25em}.fa-ul{list-style-type:none;margin-left:2.5em;padding-left:0}.fa-ul>li{position:relative}.fa-li{left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}.fa-border{border:solid .08em #eee;border-radius:.1em;padding:.2em .25em .15em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left{margin-right:.3em}.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right{margin-left:.3em}.fa-spin{-webkit-animation:fa-spin 1s infinite linear;animation:fa-spin 1.1s infinite linear}.fa-pulse{-webkit-animation:fa-spin 1.1s infinite steps(5);animation:fa-spin 1s infinite steps(5)}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.fa-rotate-90{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{-webkit-transform:scale(-1,1);transform:scale(-1,1)}.fa-flip-vertical{-webkit-transform:scale(1,-1);transform:scale(1,-1)}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical{-webkit-transform:scale(-1,-1);transform:scale(-1,-1)}:root .fa-flip-both,:root .fa-flip-horizontal,:root .fa-flip-vertical,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-rotate-90{-webkit-filter:none;filter:none}.fa-stack{display:inline-block;height:2em;position:relative;width:2.5em}.fa-stack-1x,.fa-stack-2x{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.svg-inline--fa.fa-stack-1x{height:1em;width:1.25em}.svg-inline--fa.fa-stack-2x{height:2em;width:2.5em}.fa-inverse{color:#fff}.sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.sr-only-focusable:active,.sr-only-focusable:focus{clip:auto;height:auto;margin:0;overflow:visible;position:static;width:auto}.svg-inline--fa .fa-primary{fill:var(--fa-primary-color,currentColor);opacity:1;opacity:var(--fa-primary-opacity,1)}.svg-inline--fa .fa-secondary{fill:var(--fa-secondary-color,currentColor);opacity:.4;opacity:var(--fa-secondary-opacity,.4)}.svg-inline--fa.fa-swap-opacity .fa-primary{opacity:.4;opacity:var(--fa-secondary-opacity,.4)}.svg-inline--fa.fa-swap-opacity .fa-secondary{opacity:1;opacity:var(--fa-primary-opacity,1)}.svg-inline--fa mask .fa-primary,.svg-inline--fa mask .fa-secondary{fill:#000}.fad.fa-inverse{color:#fff}";

  function css () {
    var dfp = DEFAULT_FAMILY_PREFIX;
    var drc = DEFAULT_REPLACEMENT_CLASS;
    var fp = config.familyPrefix;
    var rc = config.replacementClass;
    var s = baseStyles;

    if (fp !== dfp || rc !== drc) {
      var dPatt = new RegExp("\\.".concat(dfp, "\\-"), 'g');
      var customPropPatt = new RegExp("\\--".concat(dfp, "\\-"), 'g');
      var rPatt = new RegExp("\\.".concat(drc), 'g');
      s = s.replace(dPatt, ".".concat(fp, "-")).replace(customPropPatt, "--".concat(fp, "-")).replace(rPatt, ".".concat(rc));
    }

    return s;
  }

  var Library =
  /*#__PURE__*/
  function () {
    function Library() {
      _classCallCheck(this, Library);

      this.definitions = {};
    }

    _createClass(Library, [{
      key: "add",
      value: function add() {
        var _this = this;

        for (var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++) {
          definitions[_key] = arguments[_key];
        }

        var additions = definitions.reduce(this._pullDefinitions, {});
        Object.keys(additions).forEach(function (key) {
          _this.definitions[key] = _objectSpread({}, _this.definitions[key] || {}, additions[key]);
          defineIcons(key, additions[key]);
          build();
        });
      }
    }, {
      key: "reset",
      value: function reset() {
        this.definitions = {};
      }
    }, {
      key: "_pullDefinitions",
      value: function _pullDefinitions(additions, definition) {
        var normalized = definition.prefix && definition.iconName && definition.icon ? {
          0: definition
        } : definition;
        Object.keys(normalized).map(function (key) {
          var _normalized$key = normalized[key],
              prefix = _normalized$key.prefix,
              iconName = _normalized$key.iconName,
              icon = _normalized$key.icon;
          if (!additions[prefix]) additions[prefix] = {};
          additions[prefix][iconName] = icon;
        });
        return additions;
      }
    }]);

    return Library;
  }();

  function ensureCss() {
    if (config.autoAddCss && !_cssInserted) {
      insertCss(css());

      _cssInserted = true;
    }
  }

  function apiObject(val, abstractCreator) {
    Object.defineProperty(val, 'abstract', {
      get: abstractCreator
    });
    Object.defineProperty(val, 'html', {
      get: function get() {
        return val.abstract.map(function (a) {
          return toHtml(a);
        });
      }
    });
    Object.defineProperty(val, 'node', {
      get: function get() {
        if (!IS_DOM) return;
        var container = DOCUMENT.createElement('div');
        container.innerHTML = val.html;
        return container.children;
      }
    });
    return val;
  }

  function findIconDefinition(iconLookup) {
    var _iconLookup$prefix = iconLookup.prefix,
        prefix = _iconLookup$prefix === void 0 ? 'fa' : _iconLookup$prefix,
        iconName = iconLookup.iconName;
    if (!iconName) return;
    return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);
  }

  function resolveIcons(next) {
    return function (maybeIconDefinition) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});
      var mask = params.mask;

      if (mask) {
        mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});
      }

      return next(iconDefinition, _objectSpread({}, params, {
        mask: mask
      }));
    };
  }

  var library = new Library();
  var noAuto = function noAuto() {
    config.autoReplaceSvg = false;
    config.observeMutations = false;
    disconnect();
  };
  var _cssInserted = false;
  var dom = {
    i2svg: function i2svg() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (IS_DOM) {
        ensureCss();
        var _params$node = params.node,
            node = _params$node === void 0 ? DOCUMENT : _params$node,
            _params$callback = params.callback,
            callback = _params$callback === void 0 ? function () {} : _params$callback;

        if (config.searchPseudoElements) {
          searchPseudoElements(node);
        }

        return onTree(node, callback);
      } else {
        return picked.reject('Operation requires a DOM of some kind.');
      }
    },
    css: css,
    insertCss: function insertCss$$1() {
      if (!_cssInserted) {
        insertCss(css());

        _cssInserted = true;
      }
    },
    watch: function watch() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var autoReplaceSvgRoot = params.autoReplaceSvgRoot,
          observeMutationsRoot = params.observeMutationsRoot;

      if (config.autoReplaceSvg === false) {
        config.autoReplaceSvg = true;
      }

      config.observeMutations = true;
      domready(function () {
        autoReplace({
          autoReplaceSvgRoot: autoReplaceSvgRoot
        });
        observe({
          treeCallback: onTree,
          nodeCallback: onNode,
          pseudoElementsCallback: searchPseudoElements,
          observeMutationsRoot: observeMutationsRoot
        });
      });
    }
  };
  var parse = {
    transform: function transform(transformString) {
      return parseTransformString(transformString);
    }
  };
  var icon = resolveIcons(function (iconDefinition) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$transform = params.transform,
        transform = _params$transform === void 0 ? meaninglessTransform : _params$transform,
        _params$symbol = params.symbol,
        symbol = _params$symbol === void 0 ? false : _params$symbol,
        _params$mask = params.mask,
        mask = _params$mask === void 0 ? null : _params$mask,
        _params$maskId = params.maskId,
        maskId = _params$maskId === void 0 ? null : _params$maskId,
        _params$title = params.title,
        title = _params$title === void 0 ? null : _params$title,
        _params$titleId = params.titleId,
        titleId = _params$titleId === void 0 ? null : _params$titleId,
        _params$classes = params.classes,
        classes = _params$classes === void 0 ? [] : _params$classes,
        _params$attributes = params.attributes,
        attributes = _params$attributes === void 0 ? {} : _params$attributes,
        _params$styles = params.styles,
        styles = _params$styles === void 0 ? {} : _params$styles;
    if (!iconDefinition) return;
    var prefix = iconDefinition.prefix,
        iconName = iconDefinition.iconName,
        icon = iconDefinition.icon;
    return apiObject(_objectSpread({
      type: 'icon'
    }, iconDefinition), function () {
      ensureCss();

      if (config.autoA11y) {
        if (title) {
          attributes['aria-labelledby'] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
        } else {
          attributes['aria-hidden'] = 'true';
          attributes['focusable'] = 'false';
        }
      }

      return makeInlineSvgAbstract({
        icons: {
          main: asFoundIcon(icon),
          mask: mask ? asFoundIcon(mask.icon) : {
            found: false,
            width: null,
            height: null,
            icon: {}
          }
        },
        prefix: prefix,
        iconName: iconName,
        transform: _objectSpread({}, meaninglessTransform, transform),
        symbol: symbol,
        title: title,
        maskId: maskId,
        titleId: titleId,
        extra: {
          attributes: attributes,
          styles: styles,
          classes: classes
        }
      });
    });
  });
  var text = function text(content) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$transform2 = params.transform,
        transform = _params$transform2 === void 0 ? meaninglessTransform : _params$transform2,
        _params$title2 = params.title,
        title = _params$title2 === void 0 ? null : _params$title2,
        _params$classes2 = params.classes,
        classes = _params$classes2 === void 0 ? [] : _params$classes2,
        _params$attributes2 = params.attributes,
        attributes = _params$attributes2 === void 0 ? {} : _params$attributes2,
        _params$styles2 = params.styles,
        styles = _params$styles2 === void 0 ? {} : _params$styles2;
    return apiObject({
      type: 'text',
      content: content
    }, function () {
      ensureCss();
      return makeLayersTextAbstract({
        content: content,
        transform: _objectSpread({}, meaninglessTransform, transform),
        title: title,
        extra: {
          attributes: attributes,
          styles: styles,
          classes: ["".concat(config.familyPrefix, "-layers-text")].concat(_toConsumableArray(classes))
        }
      });
    });
  };
  var counter = function counter(content) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$title3 = params.title,
        title = _params$title3 === void 0 ? null : _params$title3,
        _params$classes3 = params.classes,
        classes = _params$classes3 === void 0 ? [] : _params$classes3,
        _params$attributes3 = params.attributes,
        attributes = _params$attributes3 === void 0 ? {} : _params$attributes3,
        _params$styles3 = params.styles,
        styles = _params$styles3 === void 0 ? {} : _params$styles3;
    return apiObject({
      type: 'counter',
      content: content
    }, function () {
      ensureCss();
      return makeLayersCounterAbstract({
        content: content.toString(),
        title: title,
        extra: {
          attributes: attributes,
          styles: styles,
          classes: ["".concat(config.familyPrefix, "-layers-counter")].concat(_toConsumableArray(classes))
        }
      });
    });
  };
  var layer = function layer(assembler) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$classes4 = params.classes,
        classes = _params$classes4 === void 0 ? [] : _params$classes4;
    return apiObject({
      type: 'layer'
    }, function () {
      ensureCss();
      var children = [];
      assembler(function (args) {
        Array.isArray(args) ? args.map(function (a) {
          children = children.concat(a.abstract);
        }) : children = children.concat(args.abstract);
      });
      return [{
        tag: 'span',
        attributes: {
          class: ["".concat(config.familyPrefix, "-layers")].concat(_toConsumableArray(classes)).join(' ')
        },
        children: children
      }];
    });
  };
  var api = {
    noAuto: noAuto,
    config: config,
    dom: dom,
    library: library,
    parse: parse,
    findIconDefinition: findIconDefinition,
    icon: icon,
    text: text,
    counter: counter,
    layer: layer,
    toHtml: toHtml
  };

  var autoReplace = function autoReplace() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _params$autoReplaceSv = params.autoReplaceSvgRoot,
        autoReplaceSvgRoot = _params$autoReplaceSv === void 0 ? DOCUMENT : _params$autoReplaceSv;
    if ((Object.keys(namespace.styles).length > 0 || config.autoFetchSvg) && IS_DOM && config.autoReplaceSvg) api.dom.i2svg({
      node: autoReplaceSvgRoot
    });
  };

  function bootstrap() {
    if (IS_BROWSER) {
      if (!WINDOW.FontAwesome) {
        WINDOW.FontAwesome = api;
      }

      domready(function () {
        autoReplace();
        observe({
          treeCallback: onTree,
          nodeCallback: onNode,
          pseudoElementsCallback: searchPseudoElements
        });
      });
    }

    namespace.hooks = _objectSpread({}, namespace.hooks, {
      addPack: function addPack(prefix, icons) {
        namespace.styles[prefix] = _objectSpread({}, namespace.styles[prefix] || {}, icons);
        build();
        autoReplace();
      },
      addShims: function addShims(shims) {
        var _namespace$shims;

        (_namespace$shims = namespace.shims).push.apply(_namespace$shims, _toConsumableArray(shims));

        build();
        autoReplace();
      }
    });
  }

  bunker(bootstrap);

}());
